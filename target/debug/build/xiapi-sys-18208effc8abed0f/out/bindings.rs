/* automatically generated by rust-bindgen 0.69.5 */

pub const _FEATURES_H: u32 = 1;
pub const _DEFAULT_SOURCE: u32 = 1;
pub const __GLIBC_USE_ISOC2X: u32 = 0;
pub const __USE_ISOC11: u32 = 1;
pub const __USE_ISOC99: u32 = 1;
pub const __USE_ISOC95: u32 = 1;
pub const __USE_POSIX_IMPLICITLY: u32 = 1;
pub const _POSIX_SOURCE: u32 = 1;
pub const _POSIX_C_SOURCE: u32 = 200809;
pub const __USE_POSIX: u32 = 1;
pub const __USE_POSIX2: u32 = 1;
pub const __USE_POSIX199309: u32 = 1;
pub const __USE_POSIX199506: u32 = 1;
pub const __USE_XOPEN2K: u32 = 1;
pub const __USE_XOPEN2K8: u32 = 1;
pub const _ATFILE_SOURCE: u32 = 1;
pub const __USE_MISC: u32 = 1;
pub const __USE_ATFILE: u32 = 1;
pub const __USE_FORTIFY_LEVEL: u32 = 0;
pub const __GLIBC_USE_DEPRECATED_GETS: u32 = 0;
pub const __GLIBC_USE_DEPRECATED_SCANF: u32 = 0;
pub const _STDC_PREDEF_H: u32 = 1;
pub const __STDC_IEC_559__: u32 = 1;
pub const __STDC_IEC_559_COMPLEX__: u32 = 1;
pub const __STDC_ISO_10646__: u32 = 201706;
pub const __GNU_LIBRARY__: u32 = 6;
pub const __GLIBC__: u32 = 2;
pub const __GLIBC_MINOR__: u32 = 31;
pub const _SYS_CDEFS_H: u32 = 1;
pub const __glibc_c99_flexarr_available: u32 = 1;
pub const __WORDSIZE: u32 = 64;
pub const __WORDSIZE_TIME64_COMPAT32: u32 = 1;
pub const __SYSCALL_WORDSIZE: u32 = 64;
pub const __LONG_DOUBLE_USES_FLOAT128: u32 = 0;
pub const __HAVE_GENERIC_SELECTION: u32 = 1;
pub const __GLIBC_USE_LIB_EXT2: u32 = 0;
pub const __GLIBC_USE_IEC_60559_BFP_EXT: u32 = 0;
pub const __GLIBC_USE_IEC_60559_BFP_EXT_C2X: u32 = 0;
pub const __GLIBC_USE_IEC_60559_FUNCS_EXT: u32 = 0;
pub const __GLIBC_USE_IEC_60559_FUNCS_EXT_C2X: u32 = 0;
pub const __GLIBC_USE_IEC_60559_TYPES_EXT: u32 = 0;
pub const _STDLIB_H: u32 = 1;
pub const WNOHANG: u32 = 1;
pub const WUNTRACED: u32 = 2;
pub const WSTOPPED: u32 = 2;
pub const WEXITED: u32 = 4;
pub const WCONTINUED: u32 = 8;
pub const WNOWAIT: u32 = 16777216;
pub const __WNOTHREAD: u32 = 536870912;
pub const __WALL: u32 = 1073741824;
pub const __WCLONE: u32 = 2147483648;
pub const __ENUM_IDTYPE_T: u32 = 1;
pub const __W_CONTINUED: u32 = 65535;
pub const __WCOREFLAG: u32 = 128;
pub const __HAVE_FLOAT128: u32 = 0;
pub const __HAVE_DISTINCT_FLOAT128: u32 = 0;
pub const __HAVE_FLOAT64X: u32 = 1;
pub const __HAVE_FLOAT64X_LONG_DOUBLE: u32 = 1;
pub const __HAVE_FLOAT16: u32 = 0;
pub const __HAVE_FLOAT32: u32 = 1;
pub const __HAVE_FLOAT64: u32 = 1;
pub const __HAVE_FLOAT32X: u32 = 1;
pub const __HAVE_FLOAT128X: u32 = 0;
pub const __HAVE_DISTINCT_FLOAT16: u32 = 0;
pub const __HAVE_DISTINCT_FLOAT32: u32 = 0;
pub const __HAVE_DISTINCT_FLOAT64: u32 = 0;
pub const __HAVE_DISTINCT_FLOAT32X: u32 = 0;
pub const __HAVE_DISTINCT_FLOAT64X: u32 = 0;
pub const __HAVE_DISTINCT_FLOAT128X: u32 = 0;
pub const __HAVE_FLOATN_NOT_TYPEDEF: u32 = 0;
pub const __ldiv_t_defined: u32 = 1;
pub const __lldiv_t_defined: u32 = 1;
pub const RAND_MAX: u32 = 2147483647;
pub const EXIT_FAILURE: u32 = 1;
pub const EXIT_SUCCESS: u32 = 0;
pub const _SYS_TYPES_H: u32 = 1;
pub const _BITS_TYPES_H: u32 = 1;
pub const __TIMESIZE: u32 = 64;
pub const _BITS_TYPESIZES_H: u32 = 1;
pub const __OFF_T_MATCHES_OFF64_T: u32 = 1;
pub const __INO_T_MATCHES_INO64_T: u32 = 1;
pub const __RLIM_T_MATCHES_RLIM64_T: u32 = 1;
pub const __STATFS_MATCHES_STATFS64: u32 = 1;
pub const __FD_SETSIZE: u32 = 1024;
pub const _BITS_TIME64_H: u32 = 1;
pub const __clock_t_defined: u32 = 1;
pub const __clockid_t_defined: u32 = 1;
pub const __time_t_defined: u32 = 1;
pub const __timer_t_defined: u32 = 1;
pub const _BITS_STDINT_INTN_H: u32 = 1;
pub const __BIT_TYPES_DEFINED__: u32 = 1;
pub const _ENDIAN_H: u32 = 1;
pub const _BITS_ENDIAN_H: u32 = 1;
pub const __LITTLE_ENDIAN: u32 = 1234;
pub const __BIG_ENDIAN: u32 = 4321;
pub const __PDP_ENDIAN: u32 = 3412;
pub const _BITS_ENDIANNESS_H: u32 = 1;
pub const __BYTE_ORDER: u32 = 1234;
pub const __FLOAT_WORD_ORDER: u32 = 1234;
pub const LITTLE_ENDIAN: u32 = 1234;
pub const BIG_ENDIAN: u32 = 4321;
pub const PDP_ENDIAN: u32 = 3412;
pub const BYTE_ORDER: u32 = 1234;
pub const _BITS_BYTESWAP_H: u32 = 1;
pub const _BITS_UINTN_IDENTITY_H: u32 = 1;
pub const _SYS_SELECT_H: u32 = 1;
pub const __FD_ZERO_STOS: &[u8; 6] = b"stosq\0";
pub const __sigset_t_defined: u32 = 1;
pub const __timeval_defined: u32 = 1;
pub const _STRUCT_TIMESPEC: u32 = 1;
pub const FD_SETSIZE: u32 = 1024;
pub const _BITS_PTHREADTYPES_COMMON_H: u32 = 1;
pub const _THREAD_SHARED_TYPES_H: u32 = 1;
pub const _BITS_PTHREADTYPES_ARCH_H: u32 = 1;
pub const __SIZEOF_PTHREAD_MUTEX_T: u32 = 40;
pub const __SIZEOF_PTHREAD_ATTR_T: u32 = 56;
pub const __SIZEOF_PTHREAD_RWLOCK_T: u32 = 56;
pub const __SIZEOF_PTHREAD_BARRIER_T: u32 = 32;
pub const __SIZEOF_PTHREAD_MUTEXATTR_T: u32 = 4;
pub const __SIZEOF_PTHREAD_COND_T: u32 = 48;
pub const __SIZEOF_PTHREAD_CONDATTR_T: u32 = 4;
pub const __SIZEOF_PTHREAD_RWLOCKATTR_T: u32 = 8;
pub const __SIZEOF_PTHREAD_BARRIERATTR_T: u32 = 4;
pub const _THREAD_MUTEX_INTERNAL_H: u32 = 1;
pub const __PTHREAD_MUTEX_HAVE_PREV: u32 = 1;
pub const __have_pthread_attr_t: u32 = 1;
pub const _ALLOCA_H: u32 = 1;
pub const _STDINT_H: u32 = 1;
pub const _BITS_WCHAR_H: u32 = 1;
pub const _BITS_STDINT_UINTN_H: u32 = 1;
pub const INT8_MIN: i32 = -128;
pub const INT16_MIN: i32 = -32768;
pub const INT32_MIN: i32 = -2147483648;
pub const INT8_MAX: u32 = 127;
pub const INT16_MAX: u32 = 32767;
pub const INT32_MAX: u32 = 2147483647;
pub const UINT8_MAX: u32 = 255;
pub const UINT16_MAX: u32 = 65535;
pub const UINT32_MAX: u32 = 4294967295;
pub const INT_LEAST8_MIN: i32 = -128;
pub const INT_LEAST16_MIN: i32 = -32768;
pub const INT_LEAST32_MIN: i32 = -2147483648;
pub const INT_LEAST8_MAX: u32 = 127;
pub const INT_LEAST16_MAX: u32 = 32767;
pub const INT_LEAST32_MAX: u32 = 2147483647;
pub const UINT_LEAST8_MAX: u32 = 255;
pub const UINT_LEAST16_MAX: u32 = 65535;
pub const UINT_LEAST32_MAX: u32 = 4294967295;
pub const INT_FAST8_MIN: i32 = -128;
pub const INT_FAST16_MIN: i64 = -9223372036854775808;
pub const INT_FAST32_MIN: i64 = -9223372036854775808;
pub const INT_FAST8_MAX: u32 = 127;
pub const INT_FAST16_MAX: u64 = 9223372036854775807;
pub const INT_FAST32_MAX: u64 = 9223372036854775807;
pub const UINT_FAST8_MAX: u32 = 255;
pub const UINT_FAST16_MAX: i32 = -1;
pub const UINT_FAST32_MAX: i32 = -1;
pub const INTPTR_MIN: i64 = -9223372036854775808;
pub const INTPTR_MAX: u64 = 9223372036854775807;
pub const UINTPTR_MAX: i32 = -1;
pub const PTRDIFF_MIN: i64 = -9223372036854775808;
pub const PTRDIFF_MAX: u64 = 9223372036854775807;
pub const SIG_ATOMIC_MIN: i32 = -2147483648;
pub const SIG_ATOMIC_MAX: u32 = 2147483647;
pub const SIZE_MAX: i32 = -1;
pub const WINT_MIN: u32 = 0;
pub const WINT_MAX: u32 = 4294967295;
pub const _LIBC_LIMITS_H_: u32 = 1;
pub const MB_LEN_MAX: u32 = 16;
pub const _BITS_POSIX1_LIM_H: u32 = 1;
pub const _POSIX_AIO_LISTIO_MAX: u32 = 2;
pub const _POSIX_AIO_MAX: u32 = 1;
pub const _POSIX_ARG_MAX: u32 = 4096;
pub const _POSIX_CHILD_MAX: u32 = 25;
pub const _POSIX_DELAYTIMER_MAX: u32 = 32;
pub const _POSIX_HOST_NAME_MAX: u32 = 255;
pub const _POSIX_LINK_MAX: u32 = 8;
pub const _POSIX_LOGIN_NAME_MAX: u32 = 9;
pub const _POSIX_MAX_CANON: u32 = 255;
pub const _POSIX_MAX_INPUT: u32 = 255;
pub const _POSIX_MQ_OPEN_MAX: u32 = 8;
pub const _POSIX_MQ_PRIO_MAX: u32 = 32;
pub const _POSIX_NAME_MAX: u32 = 14;
pub const _POSIX_NGROUPS_MAX: u32 = 8;
pub const _POSIX_OPEN_MAX: u32 = 20;
pub const _POSIX_PATH_MAX: u32 = 256;
pub const _POSIX_PIPE_BUF: u32 = 512;
pub const _POSIX_RE_DUP_MAX: u32 = 255;
pub const _POSIX_RTSIG_MAX: u32 = 8;
pub const _POSIX_SEM_NSEMS_MAX: u32 = 256;
pub const _POSIX_SEM_VALUE_MAX: u32 = 32767;
pub const _POSIX_SIGQUEUE_MAX: u32 = 32;
pub const _POSIX_SSIZE_MAX: u32 = 32767;
pub const _POSIX_STREAM_MAX: u32 = 8;
pub const _POSIX_SYMLINK_MAX: u32 = 255;
pub const _POSIX_SYMLOOP_MAX: u32 = 8;
pub const _POSIX_TIMER_MAX: u32 = 32;
pub const _POSIX_TTY_NAME_MAX: u32 = 9;
pub const _POSIX_TZNAME_MAX: u32 = 6;
pub const _POSIX_CLOCKRES_MIN: u32 = 20000000;
pub const NR_OPEN: u32 = 1024;
pub const NGROUPS_MAX: u32 = 65536;
pub const ARG_MAX: u32 = 131072;
pub const LINK_MAX: u32 = 127;
pub const MAX_CANON: u32 = 255;
pub const MAX_INPUT: u32 = 255;
pub const NAME_MAX: u32 = 255;
pub const PATH_MAX: u32 = 4096;
pub const PIPE_BUF: u32 = 4096;
pub const XATTR_NAME_MAX: u32 = 255;
pub const XATTR_SIZE_MAX: u32 = 65536;
pub const XATTR_LIST_MAX: u32 = 65536;
pub const RTSIG_MAX: u32 = 32;
pub const _POSIX_THREAD_KEYS_MAX: u32 = 128;
pub const PTHREAD_KEYS_MAX: u32 = 1024;
pub const _POSIX_THREAD_DESTRUCTOR_ITERATIONS: u32 = 4;
pub const PTHREAD_DESTRUCTOR_ITERATIONS: u32 = 4;
pub const _POSIX_THREAD_THREADS_MAX: u32 = 64;
pub const AIO_PRIO_DELTA_MAX: u32 = 20;
pub const PTHREAD_STACK_MIN: u32 = 16384;
pub const DELAYTIMER_MAX: u32 = 2147483647;
pub const TTY_NAME_MAX: u32 = 32;
pub const LOGIN_NAME_MAX: u32 = 256;
pub const HOST_NAME_MAX: u32 = 64;
pub const MQ_PRIO_MAX: u32 = 32768;
pub const SEM_VALUE_MAX: u32 = 2147483647;
pub const _BITS_POSIX2_LIM_H: u32 = 1;
pub const _POSIX2_BC_BASE_MAX: u32 = 99;
pub const _POSIX2_BC_DIM_MAX: u32 = 2048;
pub const _POSIX2_BC_SCALE_MAX: u32 = 99;
pub const _POSIX2_BC_STRING_MAX: u32 = 1000;
pub const _POSIX2_COLL_WEIGHTS_MAX: u32 = 2;
pub const _POSIX2_EXPR_NEST_MAX: u32 = 32;
pub const _POSIX2_LINE_MAX: u32 = 2048;
pub const _POSIX2_RE_DUP_MAX: u32 = 255;
pub const _POSIX2_CHARCLASS_NAME_MAX: u32 = 14;
pub const BC_BASE_MAX: u32 = 99;
pub const BC_DIM_MAX: u32 = 2048;
pub const BC_SCALE_MAX: u32 = 99;
pub const BC_STRING_MAX: u32 = 1000;
pub const COLL_WEIGHTS_MAX: u32 = 255;
pub const EXPR_NEST_MAX: u32 = 32;
pub const LINE_MAX: u32 = 2048;
pub const CHARCLASS_NAME_MAX: u32 = 2048;
pub const RE_DUP_MAX: u32 = 32767;
pub const MAX_PATH: u32 = 4096;
pub const _MAX_PATH: u32 = 4096;
pub const ERROR_SUCCESS: u32 = 0;
pub const FALSE: u32 = 0;
pub const TRUE: u32 = 1;
pub const XI_PRM_EXPOSURE: &[u8; 9] = b"exposure\0";
pub const XI_PRM_EXPOSURE_TIME_SELECTOR: &[u8; 23] = b"exposure_time_selector\0";
pub const XI_PRM_EXPOSURE_BURST_COUNT: &[u8; 21] = b"exposure_burst_count\0";
pub const XI_PRM_GAIN_SELECTOR: &[u8; 14] = b"gain_selector\0";
pub const XI_PRM_GAIN: &[u8; 5] = b"gain\0";
pub const XI_PRM_DOWNSAMPLING: &[u8; 13] = b"downsampling\0";
pub const XI_PRM_DOWNSAMPLING_TYPE: &[u8; 18] = b"downsampling_type\0";
pub const XI_PRM_TEST_PATTERN_GENERATOR_SELECTOR: &[u8; 32] = b"test_pattern_generator_selector\0";
pub const XI_PRM_TEST_PATTERN: &[u8; 13] = b"test_pattern\0";
pub const XI_PRM_IMAGE_DATA_FORMAT: &[u8; 14] = b"imgdataformat\0";
pub const XI_PRM_SHUTTER_TYPE: &[u8; 13] = b"shutter_type\0";
pub const XI_PRM_SENSOR_TAPS: &[u8; 12] = b"sensor_taps\0";
pub const XI_PRM_AEAG: &[u8; 5] = b"aeag\0";
pub const XI_PRM_AEAG_ROI_OFFSET_X: &[u8; 18] = b"aeag_roi_offset_x\0";
pub const XI_PRM_AEAG_ROI_OFFSET_Y: &[u8; 18] = b"aeag_roi_offset_y\0";
pub const XI_PRM_AEAG_ROI_WIDTH: &[u8; 15] = b"aeag_roi_width\0";
pub const XI_PRM_AEAG_ROI_HEIGHT: &[u8; 16] = b"aeag_roi_height\0";
pub const XI_PRM_SENS_DEFECTS_CORR_LIST_SELECTOR: &[u8; 18] = b"bpc_list_selector\0";
pub const XI_PRM_SENS_DEFECTS_CORR_LIST_CONTENT: &[u8; 31] = b"sens_defects_corr_list_content\0";
pub const XI_PRM_SENS_DEFECTS_CORR: &[u8; 4] = b"bpc\0";
pub const XI_PRM_AUTO_WB: &[u8; 8] = b"auto_wb\0";
pub const XI_PRM_MANUAL_WB: &[u8; 10] = b"manual_wb\0";
pub const XI_PRM_WB_ROI_OFFSET_X: &[u8; 16] = b"wb_roi_offset_x\0";
pub const XI_PRM_WB_ROI_OFFSET_Y: &[u8; 16] = b"wb_roi_offset_y\0";
pub const XI_PRM_WB_ROI_WIDTH: &[u8; 13] = b"wb_roi_width\0";
pub const XI_PRM_WB_ROI_HEIGHT: &[u8; 14] = b"wb_roi_height\0";
pub const XI_PRM_WB_KR: &[u8; 6] = b"wb_kr\0";
pub const XI_PRM_WB_KG: &[u8; 6] = b"wb_kg\0";
pub const XI_PRM_WB_KB: &[u8; 6] = b"wb_kb\0";
pub const XI_PRM_WIDTH: &[u8; 6] = b"width\0";
pub const XI_PRM_HEIGHT: &[u8; 7] = b"height\0";
pub const XI_PRM_OFFSET_X: &[u8; 8] = b"offsetX\0";
pub const XI_PRM_OFFSET_Y: &[u8; 8] = b"offsetY\0";
pub const XI_PRM_REGION_SELECTOR: &[u8; 16] = b"region_selector\0";
pub const XI_PRM_REGION_MODE: &[u8; 12] = b"region_mode\0";
pub const XI_PRM_HORIZONTAL_FLIP: &[u8; 16] = b"horizontal_flip\0";
pub const XI_PRM_VERTICAL_FLIP: &[u8; 14] = b"vertical_flip\0";
pub const XI_PRM_INTERLINE_EXPOSURE_MODE: &[u8; 24] = b"interline_exposure_mode\0";
pub const XI_PRM_FFC: &[u8; 4] = b"ffc\0";
pub const XI_PRM_FFC_FLAT_FIELD_FILE_NAME: &[u8; 25] = b"ffc_flat_field_file_name\0";
pub const XI_PRM_FFC_DARK_FIELD_FILE_NAME: &[u8; 25] = b"ffc_dark_field_file_name\0";
pub const XI_PRM_BINNING_SELECTOR: &[u8; 17] = b"binning_selector\0";
pub const XI_PRM_BINNING_VERTICAL_MODE: &[u8; 22] = b"binning_vertical_mode\0";
pub const XI_PRM_BINNING_VERTICAL: &[u8; 17] = b"binning_vertical\0";
pub const XI_PRM_BINNING_HORIZONTAL_MODE: &[u8; 24] = b"binning_horizontal_mode\0";
pub const XI_PRM_BINNING_HORIZONTAL: &[u8; 19] = b"binning_horizontal\0";
pub const XI_PRM_BINNING_HORIZONTAL_PATTERN: &[u8; 27] = b"binning_horizontal_pattern\0";
pub const XI_PRM_BINNING_VERTICAL_PATTERN: &[u8; 25] = b"binning_vertical_pattern\0";
pub const XI_PRM_DECIMATION_SELECTOR: &[u8; 20] = b"decimation_selector\0";
pub const XI_PRM_DECIMATION_VERTICAL: &[u8; 20] = b"decimation_vertical\0";
pub const XI_PRM_DECIMATION_HORIZONTAL: &[u8; 22] = b"decimation_horizontal\0";
pub const XI_PRM_DECIMATION_HORIZONTAL_PATTERN: &[u8; 30] = b"decimation_horizontal_pattern\0";
pub const XI_PRM_DECIMATION_VERTICAL_PATTERN: &[u8; 28] = b"decimation_vertical_pattern\0";
pub const XI_PRM_EXP_PRIORITY: &[u8; 13] = b"exp_priority\0";
pub const XI_PRM_AG_MAX_LIMIT: &[u8; 13] = b"ag_max_limit\0";
pub const XI_PRM_AE_MAX_LIMIT: &[u8; 13] = b"ae_max_limit\0";
pub const XI_PRM_AEAG_LEVEL: &[u8; 11] = b"aeag_level\0";
pub const XI_PRM_LIMIT_BANDWIDTH: &[u8; 16] = b"limit_bandwidth\0";
pub const XI_PRM_LIMIT_BANDWIDTH_MODE: &[u8; 21] = b"limit_bandwidth_mode\0";
pub const XI_PRM_SENSOR_DATA_BIT_DEPTH: &[u8; 17] = b"sensor_bit_depth\0";
pub const XI_PRM_OUTPUT_DATA_BIT_DEPTH: &[u8; 17] = b"output_bit_depth\0";
pub const XI_PRM_IMAGE_DATA_BIT_DEPTH: &[u8; 21] = b"image_data_bit_depth\0";
pub const XI_PRM_OUTPUT_DATA_PACKING: &[u8; 19] = b"output_bit_packing\0";
pub const XI_PRM_OUTPUT_DATA_PACKING_TYPE: &[u8; 24] = b"output_bit_packing_type\0";
pub const XI_PRM_IS_COOLED: &[u8; 9] = b"iscooled\0";
pub const XI_PRM_COOLING: &[u8; 8] = b"cooling\0";
pub const XI_PRM_TARGET_TEMP: &[u8; 12] = b"target_temp\0";
pub const XI_PRM_TEMP_SELECTOR: &[u8; 14] = b"temp_selector\0";
pub const XI_PRM_TEMP: &[u8; 5] = b"temp\0";
pub const XI_PRM_TEMP_CONTROL_MODE: &[u8; 29] = b"device_temperature_ctrl_mode\0";
pub const XI_PRM_CHIP_TEMP: &[u8; 10] = b"chip_temp\0";
pub const XI_PRM_HOUS_TEMP: &[u8; 10] = b"hous_temp\0";
pub const XI_PRM_HOUS_BACK_SIDE_TEMP: &[u8; 20] = b"hous_back_side_temp\0";
pub const XI_PRM_SENSOR_BOARD_TEMP: &[u8; 18] = b"sensor_board_temp\0";
pub const XI_PRM_TEMP_ELEMENT_SEL: &[u8; 31] = b"device_temperature_element_sel\0";
pub const XI_PRM_TEMP_ELEMENT_VALUE: &[u8; 31] = b"device_temperature_element_val\0";
pub const XI_PRM_CMS: &[u8; 4] = b"cms\0";
pub const XI_PRM_CMS_INTENT: &[u8; 11] = b"cms_intent\0";
pub const XI_PRM_APPLY_CMS: &[u8; 10] = b"apply_cms\0";
pub const XI_PRM_INPUT_CMS_PROFILE: &[u8; 18] = b"input_cms_profile\0";
pub const XI_PRM_OUTPUT_CMS_PROFILE: &[u8; 19] = b"output_cms_profile\0";
pub const XI_PRM_IMAGE_IS_COLOR: &[u8; 8] = b"iscolor\0";
pub const XI_PRM_COLOR_FILTER_ARRAY: &[u8; 4] = b"cfa\0";
pub const XI_PRM_GAMMAY: &[u8; 7] = b"gammaY\0";
pub const XI_PRM_GAMMAC: &[u8; 7] = b"gammaC\0";
pub const XI_PRM_SHARPNESS: &[u8; 10] = b"sharpness\0";
pub const XI_PRM_CC_MATRIX_00: &[u8; 8] = b"ccMTX00\0";
pub const XI_PRM_CC_MATRIX_01: &[u8; 8] = b"ccMTX01\0";
pub const XI_PRM_CC_MATRIX_02: &[u8; 8] = b"ccMTX02\0";
pub const XI_PRM_CC_MATRIX_03: &[u8; 8] = b"ccMTX03\0";
pub const XI_PRM_CC_MATRIX_10: &[u8; 8] = b"ccMTX10\0";
pub const XI_PRM_CC_MATRIX_11: &[u8; 8] = b"ccMTX11\0";
pub const XI_PRM_CC_MATRIX_12: &[u8; 8] = b"ccMTX12\0";
pub const XI_PRM_CC_MATRIX_13: &[u8; 8] = b"ccMTX13\0";
pub const XI_PRM_CC_MATRIX_20: &[u8; 8] = b"ccMTX20\0";
pub const XI_PRM_CC_MATRIX_21: &[u8; 8] = b"ccMTX21\0";
pub const XI_PRM_CC_MATRIX_22: &[u8; 8] = b"ccMTX22\0";
pub const XI_PRM_CC_MATRIX_23: &[u8; 8] = b"ccMTX23\0";
pub const XI_PRM_CC_MATRIX_30: &[u8; 8] = b"ccMTX30\0";
pub const XI_PRM_CC_MATRIX_31: &[u8; 8] = b"ccMTX31\0";
pub const XI_PRM_CC_MATRIX_32: &[u8; 8] = b"ccMTX32\0";
pub const XI_PRM_CC_MATRIX_33: &[u8; 8] = b"ccMTX33\0";
pub const XI_PRM_DEFAULT_CC_MATRIX: &[u8; 9] = b"defccMTX\0";
pub const XI_PRM_CC_MATRIX_NORM: &[u8; 10] = b"ccMTXnorm\0";
pub const XI_PRM_TRG_SOURCE: &[u8; 15] = b"trigger_source\0";
pub const XI_PRM_TRG_SOFTWARE: &[u8; 17] = b"trigger_software\0";
pub const XI_PRM_TRG_SELECTOR: &[u8; 17] = b"trigger_selector\0";
pub const XI_PRM_TRG_OVERLAP: &[u8; 16] = b"trigger_overlap\0";
pub const XI_PRM_ACQ_FRAME_BURST_COUNT: &[u8; 22] = b"acq_frame_burst_count\0";
pub const XI_PRM_TIMESTAMP: &[u8; 10] = b"timestamp\0";
pub const XI_PRM_GPI_SELECTOR: &[u8; 13] = b"gpi_selector\0";
pub const XI_PRM_GPI_MODE: &[u8; 9] = b"gpi_mode\0";
pub const XI_PRM_GPI_LEVEL: &[u8; 10] = b"gpi_level\0";
pub const XI_PRM_GPI_LEVEL_AT_IMAGE_EXP_START: &[u8; 29] = b"gpi_level_at_image_exp_start\0";
pub const XI_PRM_GPI_LEVEL_AT_IMAGE_EXP_END: &[u8; 27] = b"gpi_level_at_image_exp_end\0";
pub const XI_PRM_GPO_SELECTOR: &[u8; 13] = b"gpo_selector\0";
pub const XI_PRM_GPO_MODE: &[u8; 9] = b"gpo_mode\0";
pub const XI_PRM_LED_SELECTOR: &[u8; 13] = b"led_selector\0";
pub const XI_PRM_LED_MODE: &[u8; 9] = b"led_mode\0";
pub const XI_PRM_DEBOUNCE_EN: &[u8; 8] = b"dbnc_en\0";
pub const XI_PRM_DEBOUNCE_T0: &[u8; 8] = b"dbnc_t0\0";
pub const XI_PRM_DEBOUNCE_T1: &[u8; 8] = b"dbnc_t1\0";
pub const XI_PRM_DEBOUNCE_POL: &[u8; 9] = b"dbnc_pol\0";
pub const XI_PRM_LENS_MODE: &[u8; 10] = b"lens_mode\0";
pub const XI_PRM_LENS_APERTURE_VALUE: &[u8; 20] = b"lens_aperture_value\0";
pub const XI_PRM_LENS_APERTURE_INDEX: &[u8; 20] = b"lens_aperture_index\0";
pub const XI_PRM_LENS_FOCUS_MOVEMENT_VALUE: &[u8; 26] = b"lens_focus_movement_value\0";
pub const XI_PRM_LENS_FOCUS_MOVE: &[u8; 16] = b"lens_focus_move\0";
pub const XI_PRM_LENS_FOCAL_LENGTH: &[u8; 18] = b"lens_focal_length\0";
pub const XI_PRM_LENS_FEATURE_SELECTOR: &[u8; 22] = b"lens_feature_selector\0";
pub const XI_PRM_LENS_FEATURE: &[u8; 13] = b"lens_feature\0";
pub const XI_PRM_DEVICE_NAME: &[u8; 12] = b"device_name\0";
pub const XI_PRM_DEVICE_TYPE: &[u8; 12] = b"device_type\0";
pub const XI_PRM_DEVICE_MODEL_ID: &[u8; 16] = b"device_model_id\0";
pub const XI_PRM_SENSOR_MODEL_ID: &[u8; 16] = b"sensor_model_id\0";
pub const XI_PRM_DEVICE_SN: &[u8; 10] = b"device_sn\0";
pub const XI_PRM_DEVICE_SENS_SN: &[u8; 15] = b"device_sens_sn\0";
pub const XI_PRM_DEVICE_INSTANCE_PATH: &[u8; 17] = b"device_inst_path\0";
pub const XI_PRM_DEVICE_LOCATION_PATH: &[u8; 16] = b"device_loc_path\0";
pub const XI_PRM_DEVICE_USER_ID: &[u8; 15] = b"device_user_id\0";
pub const XI_PRM_DEVICE_MANIFEST: &[u8; 16] = b"device_manifest\0";
pub const XI_PRM_IMAGE_USER_DATA: &[u8; 16] = b"image_user_data\0";
pub const XI_PRM_IMAGE_DATA_FORMAT_RGB32_ALPHA: &[u8; 24] = b"imgdataformatrgb32alpha\0";
pub const XI_PRM_IMAGE_PAYLOAD_SIZE: &[u8; 15] = b"imgpayloadsize\0";
pub const XI_PRM_TRANSPORT_PIXEL_FORMAT: &[u8; 23] = b"transport_pixel_format\0";
pub const XI_PRM_TRANSPORT_DATA_TARGET: &[u8; 22] = b"transport_data_target\0";
pub const XI_PRM_SENSOR_CLOCK_FREQ_HZ: &[u8; 21] = b"sensor_clock_freq_hz\0";
pub const XI_PRM_SENSOR_CLOCK_FREQ_INDEX: &[u8; 24] = b"sensor_clock_freq_index\0";
pub const XI_PRM_SENSOR_OUTPUT_CHANNEL_COUNT: &[u8; 28] = b"sensor_output_channel_count\0";
pub const XI_PRM_FRAMERATE: &[u8; 10] = b"framerate\0";
pub const XI_PRM_COUNTER_SELECTOR: &[u8; 17] = b"counter_selector\0";
pub const XI_PRM_COUNTER_VALUE: &[u8; 14] = b"counter_value\0";
pub const XI_PRM_ACQ_TIMING_MODE: &[u8; 16] = b"acq_timing_mode\0";
pub const XI_PRM_AVAILABLE_BANDWIDTH: &[u8; 20] = b"available_bandwidth\0";
pub const XI_PRM_BUFFER_POLICY: &[u8; 14] = b"buffer_policy\0";
pub const XI_PRM_LUT_EN: &[u8; 10] = b"LUTEnable\0";
pub const XI_PRM_LUT_INDEX: &[u8; 9] = b"LUTIndex\0";
pub const XI_PRM_LUT_VALUE: &[u8; 9] = b"LUTValue\0";
pub const XI_PRM_TRG_DELAY: &[u8; 14] = b"trigger_delay\0";
pub const XI_PRM_TS_RST_MODE: &[u8; 12] = b"ts_rst_mode\0";
pub const XI_PRM_TS_RST_SOURCE: &[u8; 14] = b"ts_rst_source\0";
pub const XI_PRM_IS_DEVICE_EXIST: &[u8; 8] = b"isexist\0";
pub const XI_PRM_ACQ_BUFFER_SIZE: &[u8; 16] = b"acq_buffer_size\0";
pub const XI_PRM_ACQ_BUFFER_SIZE_UNIT: &[u8; 21] = b"acq_buffer_size_unit\0";
pub const XI_PRM_ACQ_TRANSPORT_BUFFER_SIZE: &[u8; 26] = b"acq_transport_buffer_size\0";
pub const XI_PRM_ACQ_TRANSPORT_PACKET_SIZE: &[u8; 26] = b"acq_transport_packet_size\0";
pub const XI_PRM_BUFFERS_QUEUE_SIZE: &[u8; 19] = b"buffers_queue_size\0";
pub const XI_PRM_ACQ_TRANSPORT_BUFFER_COMMIT: &[u8; 28] = b"acq_transport_buffer_commit\0";
pub const XI_PRM_RECENT_FRAME: &[u8; 13] = b"recent_frame\0";
pub const XI_PRM_DEVICE_RESET: &[u8; 13] = b"device_reset\0";
pub const XI_PRM_CONCAT_IMG_MODE: &[u8; 16] = b"concat_img_mode\0";
pub const XI_PRM_CONCAT_IMG_COUNT: &[u8; 17] = b"concat_img_count\0";
pub const XI_PRM_CONCAT_IMG_TRANSPORT_IMG_OFFSET: &[u8; 32] = b"concat_img_transport_img_offset\0";
pub const XI_PRM_PROBE_SELECTOR: &[u8; 15] = b"probe_selector\0";
pub const XI_PRM_PROBE_VALUE: &[u8; 12] = b"probe_value\0";
pub const XI_PRM_COLUMN_FPN_CORRECTION: &[u8; 22] = b"column_fpn_correction\0";
pub const XI_PRM_ROW_FPN_CORRECTION: &[u8; 19] = b"row_fpn_correction\0";
pub const XI_PRM_COLUMN_BLACK_OFFSET_CORRECTION: &[u8; 31] = b"column_black_offset_correction\0";
pub const XI_PRM_ROW_BLACK_OFFSET_CORRECTION: &[u8; 28] = b"row_black_offset_correction\0";
pub const XI_PRM_SENSOR_MODE: &[u8; 12] = b"sensor_mode\0";
pub const XI_PRM_HDR: &[u8; 4] = b"hdr\0";
pub const XI_PRM_HDR_KNEEPOINT_COUNT: &[u8; 20] = b"hdr_kneepoint_count\0";
pub const XI_PRM_HDR_T1: &[u8; 7] = b"hdr_t1\0";
pub const XI_PRM_HDR_T2: &[u8; 7] = b"hdr_t2\0";
pub const XI_PRM_KNEEPOINT1: &[u8; 15] = b"hdr_kneepoint1\0";
pub const XI_PRM_KNEEPOINT2: &[u8; 15] = b"hdr_kneepoint2\0";
pub const XI_PRM_IMAGE_BLACK_LEVEL: &[u8; 18] = b"image_black_level\0";
pub const XI_PRM_IMAGE_AREA: &[u8; 11] = b"image_area\0";
pub const XI_PRM_DUAL_ADC_MODE: &[u8; 14] = b"dual_adc_mode\0";
pub const XI_PRM_DUAL_ADC_GAIN_RATIO: &[u8; 20] = b"dual_adc_gain_ratio\0";
pub const XI_PRM_DUAL_ADC_THRESHOLD: &[u8; 19] = b"dual_adc_threshold\0";
pub const XI_PRM_COMPRESSION_REGION_SELECTOR: &[u8; 28] = b"compression_region_selector\0";
pub const XI_PRM_COMPRESSION_REGION_START: &[u8; 25] = b"compression_region_start\0";
pub const XI_PRM_COMPRESSION_REGION_GAIN: &[u8; 24] = b"compression_region_gain\0";
pub const XI_PRM_VERSION_SELECTOR: &[u8; 17] = b"version_selector\0";
pub const XI_PRM_VERSION: &[u8; 8] = b"version\0";
pub const XI_PRM_API_VERSION: &[u8; 12] = b"api_version\0";
pub const XI_PRM_DRV_VERSION: &[u8; 12] = b"drv_version\0";
pub const XI_PRM_MCU1_VERSION: &[u8; 13] = b"version_mcu1\0";
pub const XI_PRM_MCU2_VERSION: &[u8; 13] = b"version_mcu2\0";
pub const XI_PRM_MCU3_VERSION: &[u8; 13] = b"version_mcu3\0";
pub const XI_PRM_FPGA1_VERSION: &[u8; 14] = b"version_fpga1\0";
pub const XI_PRM_XMLMAN_VERSION: &[u8; 15] = b"version_xmlman\0";
pub const XI_PRM_HW_REVISION: &[u8; 12] = b"hw_revision\0";
pub const XI_PRM_FACTORY_SET_VERSION: &[u8; 20] = b"factory_set_version\0";
pub const XI_PRM_DEBUG_LEVEL: &[u8; 12] = b"debug_level\0";
pub const XI_PRM_AUTO_BANDWIDTH_CALCULATION: &[u8; 27] = b"auto_bandwidth_calculation\0";
pub const XI_PRM_NEW_PROCESS_CHAIN_ENABLE: &[u8; 25] = b"new_process_chain_enable\0";
pub const XI_PRM_PROC_NUM_THREADS: &[u8; 17] = b"proc_num_threads\0";
pub const XI_PRM_READ_FILE_FFS: &[u8; 14] = b"read_file_ffs\0";
pub const XI_PRM_WRITE_FILE_FFS: &[u8; 15] = b"write_file_ffs\0";
pub const XI_PRM_FFS_FILE_NAME: &[u8; 14] = b"ffs_file_name\0";
pub const XI_PRM_FFS_FILE_ID: &[u8; 12] = b"ffs_file_id\0";
pub const XI_PRM_FFS_FILE_SIZE: &[u8; 14] = b"ffs_file_size\0";
pub const XI_PRM_FREE_FFS_SIZE: &[u8; 14] = b"free_ffs_size\0";
pub const XI_PRM_USED_FFS_SIZE: &[u8; 14] = b"used_ffs_size\0";
pub const XI_PRM_FFS_ACCESS_KEY: &[u8; 15] = b"ffs_access_key\0";
pub const XI_PRM_API_CONTEXT_LIST: &[u8; 19] = b"xiapi_context_list\0";
pub const XI_PRM_SENSOR_FEATURE_SELECTOR: &[u8; 24] = b"sensor_feature_selector\0";
pub const XI_PRM_SENSOR_FEATURE_VALUE: &[u8; 21] = b"sensor_feature_value\0";
pub const XI_PRM_ACQUISITION_STATUS_SELECTOR: &[u8; 28] = b"acquisition_status_selector\0";
pub const XI_PRM_ACQUISITION_STATUS: &[u8; 19] = b"acquisition_status\0";
pub const XI_PRM_DP_UNIT_SELECTOR: &[u8; 17] = b"dp_unit_selector\0";
pub const XI_PRM_DP_PROC_SELECTOR: &[u8; 17] = b"dp_proc_selector\0";
pub const XI_PRM_DP_PARAM_SELECTOR: &[u8; 18] = b"dp_param_selector\0";
pub const XI_PRM_DP_PARAM_VALUE: &[u8; 15] = b"dp_param_value\0";
pub const XI_PRM_GENTL_DATASTREAM_ENABLED: &[u8; 16] = b"gentl_stream_en\0";
pub const XI_PRM_GENTL_DATASTREAM_CONTEXT: &[u8; 21] = b"gentl_stream_context\0";
pub const XI_PRM_USER_SET_SELECTOR: &[u8; 18] = b"user_set_selector\0";
pub const XI_PRM_USER_SET_LOAD: &[u8; 14] = b"user_set_load\0";
pub const XI_PRM_USER_SET_DEFAULT: &[u8; 17] = b"user_set_default\0";
pub const XI_PRM_INFO_SETTABLE: &[u8; 10] = b":settable\0";
pub const XI_PRM_INFO_MIN: &[u8; 5] = b":min\0";
pub const XI_PRM_INFO_MAX: &[u8; 5] = b":max\0";
pub const XI_PRM_INFO_INCREMENT: &[u8; 5] = b":inc\0";
pub const XI_PRM_INFO: &[u8; 6] = b":info\0";
pub const XI_PRMM_REQ_VAL_BUFFER_SIZE: &[u8; 14] = b":req_buf_size\0";
pub const XI_PRMM_DIRECT_UPDATE: &[u8; 15] = b":direct_update\0";
pub const XI_MQ_LED_STATUS1: u32 = 1;
pub const XI_MQ_LED_STATUS2: u32 = 2;
pub const XI_MQ_LED_POWER: u32 = 3;
pub const XI_PRM_BPC: &[u8; 4] = b"bpc\0";
pub type wchar_t = ::std::os::raw::c_int;
pub mod idtype_t {
    pub type Type = ::std::os::raw::c_uint;
    pub const P_ALL: Type = 0;
    pub const P_PID: Type = 1;
    pub const P_PGID: Type = 2;
}
pub type _Float32 = f32;
pub type _Float64 = f64;
pub type _Float32x = f64;
pub type _Float64x = u128;
#[repr(C)]
#[derive(Debug, Default, Copy, Clone)]
pub struct div_t {
    pub quot: ::std::os::raw::c_int,
    pub rem: ::std::os::raw::c_int,
}
#[test]
fn bindgen_test_layout_div_t() {
    const UNINIT: ::std::mem::MaybeUninit<div_t> = ::std::mem::MaybeUninit::uninit();
    let ptr = UNINIT.as_ptr();
    assert_eq!(
        ::std::mem::size_of::<div_t>(),
        8usize,
        concat!("Size of: ", stringify!(div_t))
    );
    assert_eq!(
        ::std::mem::align_of::<div_t>(),
        4usize,
        concat!("Alignment of ", stringify!(div_t))
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).quot) as usize - ptr as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(div_t),
            "::",
            stringify!(quot)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).rem) as usize - ptr as usize },
        4usize,
        concat!(
            "Offset of field: ",
            stringify!(div_t),
            "::",
            stringify!(rem)
        )
    );
}
#[repr(C)]
#[derive(Debug, Default, Copy, Clone)]
pub struct ldiv_t {
    pub quot: ::std::os::raw::c_long,
    pub rem: ::std::os::raw::c_long,
}
#[test]
fn bindgen_test_layout_ldiv_t() {
    const UNINIT: ::std::mem::MaybeUninit<ldiv_t> = ::std::mem::MaybeUninit::uninit();
    let ptr = UNINIT.as_ptr();
    assert_eq!(
        ::std::mem::size_of::<ldiv_t>(),
        16usize,
        concat!("Size of: ", stringify!(ldiv_t))
    );
    assert_eq!(
        ::std::mem::align_of::<ldiv_t>(),
        8usize,
        concat!("Alignment of ", stringify!(ldiv_t))
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).quot) as usize - ptr as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(ldiv_t),
            "::",
            stringify!(quot)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).rem) as usize - ptr as usize },
        8usize,
        concat!(
            "Offset of field: ",
            stringify!(ldiv_t),
            "::",
            stringify!(rem)
        )
    );
}
#[repr(C)]
#[derive(Debug, Default, Copy, Clone)]
pub struct lldiv_t {
    pub quot: ::std::os::raw::c_longlong,
    pub rem: ::std::os::raw::c_longlong,
}
#[test]
fn bindgen_test_layout_lldiv_t() {
    const UNINIT: ::std::mem::MaybeUninit<lldiv_t> = ::std::mem::MaybeUninit::uninit();
    let ptr = UNINIT.as_ptr();
    assert_eq!(
        ::std::mem::size_of::<lldiv_t>(),
        16usize,
        concat!("Size of: ", stringify!(lldiv_t))
    );
    assert_eq!(
        ::std::mem::align_of::<lldiv_t>(),
        8usize,
        concat!("Alignment of ", stringify!(lldiv_t))
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).quot) as usize - ptr as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(lldiv_t),
            "::",
            stringify!(quot)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).rem) as usize - ptr as usize },
        8usize,
        concat!(
            "Offset of field: ",
            stringify!(lldiv_t),
            "::",
            stringify!(rem)
        )
    );
}
extern "C" {
    pub fn __ctype_get_mb_cur_max() -> usize;
}
extern "C" {
    pub fn atof(__nptr: *const ::std::os::raw::c_char) -> f64;
}
extern "C" {
    pub fn atoi(__nptr: *const ::std::os::raw::c_char) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn atol(__nptr: *const ::std::os::raw::c_char) -> ::std::os::raw::c_long;
}
extern "C" {
    pub fn atoll(__nptr: *const ::std::os::raw::c_char) -> ::std::os::raw::c_longlong;
}
extern "C" {
    pub fn strtod(
        __nptr: *const ::std::os::raw::c_char,
        __endptr: *mut *mut ::std::os::raw::c_char,
    ) -> f64;
}
extern "C" {
    pub fn strtof(
        __nptr: *const ::std::os::raw::c_char,
        __endptr: *mut *mut ::std::os::raw::c_char,
    ) -> f32;
}
extern "C" {
    pub fn strtold(
        __nptr: *const ::std::os::raw::c_char,
        __endptr: *mut *mut ::std::os::raw::c_char,
    ) -> u128;
}
extern "C" {
    pub fn strtol(
        __nptr: *const ::std::os::raw::c_char,
        __endptr: *mut *mut ::std::os::raw::c_char,
        __base: ::std::os::raw::c_int,
    ) -> ::std::os::raw::c_long;
}
extern "C" {
    pub fn strtoul(
        __nptr: *const ::std::os::raw::c_char,
        __endptr: *mut *mut ::std::os::raw::c_char,
        __base: ::std::os::raw::c_int,
    ) -> ::std::os::raw::c_ulong;
}
extern "C" {
    pub fn strtoq(
        __nptr: *const ::std::os::raw::c_char,
        __endptr: *mut *mut ::std::os::raw::c_char,
        __base: ::std::os::raw::c_int,
    ) -> ::std::os::raw::c_longlong;
}
extern "C" {
    pub fn strtouq(
        __nptr: *const ::std::os::raw::c_char,
        __endptr: *mut *mut ::std::os::raw::c_char,
        __base: ::std::os::raw::c_int,
    ) -> ::std::os::raw::c_ulonglong;
}
extern "C" {
    pub fn strtoll(
        __nptr: *const ::std::os::raw::c_char,
        __endptr: *mut *mut ::std::os::raw::c_char,
        __base: ::std::os::raw::c_int,
    ) -> ::std::os::raw::c_longlong;
}
extern "C" {
    pub fn strtoull(
        __nptr: *const ::std::os::raw::c_char,
        __endptr: *mut *mut ::std::os::raw::c_char,
        __base: ::std::os::raw::c_int,
    ) -> ::std::os::raw::c_ulonglong;
}
extern "C" {
    pub fn l64a(__n: ::std::os::raw::c_long) -> *mut ::std::os::raw::c_char;
}
extern "C" {
    pub fn a64l(__s: *const ::std::os::raw::c_char) -> ::std::os::raw::c_long;
}
pub type __u_char = ::std::os::raw::c_uchar;
pub type __u_short = ::std::os::raw::c_ushort;
pub type __u_int = ::std::os::raw::c_uint;
pub type __u_long = ::std::os::raw::c_ulong;
pub type __int8_t = ::std::os::raw::c_schar;
pub type __uint8_t = ::std::os::raw::c_uchar;
pub type __int16_t = ::std::os::raw::c_short;
pub type __uint16_t = ::std::os::raw::c_ushort;
pub type __int32_t = ::std::os::raw::c_int;
pub type __uint32_t = ::std::os::raw::c_uint;
pub type __int64_t = ::std::os::raw::c_long;
pub type __uint64_t = ::std::os::raw::c_ulong;
pub type __int_least8_t = __int8_t;
pub type __uint_least8_t = __uint8_t;
pub type __int_least16_t = __int16_t;
pub type __uint_least16_t = __uint16_t;
pub type __int_least32_t = __int32_t;
pub type __uint_least32_t = __uint32_t;
pub type __int_least64_t = __int64_t;
pub type __uint_least64_t = __uint64_t;
pub type __quad_t = ::std::os::raw::c_long;
pub type __u_quad_t = ::std::os::raw::c_ulong;
pub type __intmax_t = ::std::os::raw::c_long;
pub type __uintmax_t = ::std::os::raw::c_ulong;
pub type __dev_t = ::std::os::raw::c_ulong;
pub type __uid_t = ::std::os::raw::c_uint;
pub type __gid_t = ::std::os::raw::c_uint;
pub type __ino_t = ::std::os::raw::c_ulong;
pub type __ino64_t = ::std::os::raw::c_ulong;
pub type __mode_t = ::std::os::raw::c_uint;
pub type __nlink_t = ::std::os::raw::c_ulong;
pub type __off_t = ::std::os::raw::c_long;
pub type __off64_t = ::std::os::raw::c_long;
pub type __pid_t = ::std::os::raw::c_int;
#[repr(C)]
#[derive(Debug, Default, Copy, Clone)]
pub struct __fsid_t {
    pub __val: [::std::os::raw::c_int; 2usize],
}
#[test]
fn bindgen_test_layout___fsid_t() {
    const UNINIT: ::std::mem::MaybeUninit<__fsid_t> = ::std::mem::MaybeUninit::uninit();
    let ptr = UNINIT.as_ptr();
    assert_eq!(
        ::std::mem::size_of::<__fsid_t>(),
        8usize,
        concat!("Size of: ", stringify!(__fsid_t))
    );
    assert_eq!(
        ::std::mem::align_of::<__fsid_t>(),
        4usize,
        concat!("Alignment of ", stringify!(__fsid_t))
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).__val) as usize - ptr as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(__fsid_t),
            "::",
            stringify!(__val)
        )
    );
}
pub type __clock_t = ::std::os::raw::c_long;
pub type __rlim_t = ::std::os::raw::c_ulong;
pub type __rlim64_t = ::std::os::raw::c_ulong;
pub type __id_t = ::std::os::raw::c_uint;
pub type __time_t = ::std::os::raw::c_long;
pub type __useconds_t = ::std::os::raw::c_uint;
pub type __suseconds_t = ::std::os::raw::c_long;
pub type __daddr_t = ::std::os::raw::c_int;
pub type __key_t = ::std::os::raw::c_int;
pub type __clockid_t = ::std::os::raw::c_int;
pub type __timer_t = *mut ::std::os::raw::c_void;
pub type __blksize_t = ::std::os::raw::c_long;
pub type __blkcnt_t = ::std::os::raw::c_long;
pub type __blkcnt64_t = ::std::os::raw::c_long;
pub type __fsblkcnt_t = ::std::os::raw::c_ulong;
pub type __fsblkcnt64_t = ::std::os::raw::c_ulong;
pub type __fsfilcnt_t = ::std::os::raw::c_ulong;
pub type __fsfilcnt64_t = ::std::os::raw::c_ulong;
pub type __fsword_t = ::std::os::raw::c_long;
pub type __ssize_t = ::std::os::raw::c_long;
pub type __syscall_slong_t = ::std::os::raw::c_long;
pub type __syscall_ulong_t = ::std::os::raw::c_ulong;
pub type __loff_t = __off64_t;
pub type __caddr_t = *mut ::std::os::raw::c_char;
pub type __intptr_t = ::std::os::raw::c_long;
pub type __socklen_t = ::std::os::raw::c_uint;
pub type __sig_atomic_t = ::std::os::raw::c_int;
pub type u_char = __u_char;
pub type u_short = __u_short;
pub type u_int = __u_int;
pub type u_long = __u_long;
pub type quad_t = __quad_t;
pub type u_quad_t = __u_quad_t;
pub type fsid_t = __fsid_t;
pub type loff_t = __loff_t;
pub type ino_t = __ino_t;
pub type dev_t = __dev_t;
pub type gid_t = __gid_t;
pub type mode_t = __mode_t;
pub type nlink_t = __nlink_t;
pub type uid_t = __uid_t;
pub type off_t = __off_t;
pub type pid_t = __pid_t;
pub type id_t = __id_t;
pub type daddr_t = __daddr_t;
pub type caddr_t = __caddr_t;
pub type key_t = __key_t;
pub type clock_t = __clock_t;
pub type clockid_t = __clockid_t;
pub type time_t = __time_t;
pub type timer_t = __timer_t;
pub type ulong = ::std::os::raw::c_ulong;
pub type ushort = ::std::os::raw::c_ushort;
pub type uint = ::std::os::raw::c_uint;
pub type u_int8_t = __uint8_t;
pub type u_int16_t = __uint16_t;
pub type u_int32_t = __uint32_t;
pub type u_int64_t = __uint64_t;
pub type register_t = ::std::os::raw::c_long;
#[repr(C)]
#[derive(Debug, Default, Copy, Clone)]
pub struct __sigset_t {
    pub __val: [::std::os::raw::c_ulong; 16usize],
}
#[test]
fn bindgen_test_layout___sigset_t() {
    const UNINIT: ::std::mem::MaybeUninit<__sigset_t> = ::std::mem::MaybeUninit::uninit();
    let ptr = UNINIT.as_ptr();
    assert_eq!(
        ::std::mem::size_of::<__sigset_t>(),
        128usize,
        concat!("Size of: ", stringify!(__sigset_t))
    );
    assert_eq!(
        ::std::mem::align_of::<__sigset_t>(),
        8usize,
        concat!("Alignment of ", stringify!(__sigset_t))
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).__val) as usize - ptr as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(__sigset_t),
            "::",
            stringify!(__val)
        )
    );
}
pub type sigset_t = __sigset_t;
#[repr(C)]
#[derive(Debug, Default, Copy, Clone)]
pub struct timeval {
    pub tv_sec: __time_t,
    pub tv_usec: __suseconds_t,
}
#[test]
fn bindgen_test_layout_timeval() {
    const UNINIT: ::std::mem::MaybeUninit<timeval> = ::std::mem::MaybeUninit::uninit();
    let ptr = UNINIT.as_ptr();
    assert_eq!(
        ::std::mem::size_of::<timeval>(),
        16usize,
        concat!("Size of: ", stringify!(timeval))
    );
    assert_eq!(
        ::std::mem::align_of::<timeval>(),
        8usize,
        concat!("Alignment of ", stringify!(timeval))
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).tv_sec) as usize - ptr as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(timeval),
            "::",
            stringify!(tv_sec)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).tv_usec) as usize - ptr as usize },
        8usize,
        concat!(
            "Offset of field: ",
            stringify!(timeval),
            "::",
            stringify!(tv_usec)
        )
    );
}
#[repr(C)]
#[derive(Debug, Default, Copy, Clone)]
pub struct timespec {
    pub tv_sec: __time_t,
    pub tv_nsec: __syscall_slong_t,
}
#[test]
fn bindgen_test_layout_timespec() {
    const UNINIT: ::std::mem::MaybeUninit<timespec> = ::std::mem::MaybeUninit::uninit();
    let ptr = UNINIT.as_ptr();
    assert_eq!(
        ::std::mem::size_of::<timespec>(),
        16usize,
        concat!("Size of: ", stringify!(timespec))
    );
    assert_eq!(
        ::std::mem::align_of::<timespec>(),
        8usize,
        concat!("Alignment of ", stringify!(timespec))
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).tv_sec) as usize - ptr as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(timespec),
            "::",
            stringify!(tv_sec)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).tv_nsec) as usize - ptr as usize },
        8usize,
        concat!(
            "Offset of field: ",
            stringify!(timespec),
            "::",
            stringify!(tv_nsec)
        )
    );
}
pub type suseconds_t = __suseconds_t;
pub type __fd_mask = ::std::os::raw::c_long;
#[repr(C)]
#[derive(Debug, Default, Copy, Clone)]
pub struct fd_set {
    pub __fds_bits: [__fd_mask; 16usize],
}
#[test]
fn bindgen_test_layout_fd_set() {
    const UNINIT: ::std::mem::MaybeUninit<fd_set> = ::std::mem::MaybeUninit::uninit();
    let ptr = UNINIT.as_ptr();
    assert_eq!(
        ::std::mem::size_of::<fd_set>(),
        128usize,
        concat!("Size of: ", stringify!(fd_set))
    );
    assert_eq!(
        ::std::mem::align_of::<fd_set>(),
        8usize,
        concat!("Alignment of ", stringify!(fd_set))
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).__fds_bits) as usize - ptr as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(fd_set),
            "::",
            stringify!(__fds_bits)
        )
    );
}
pub type fd_mask = __fd_mask;
extern "C" {
    pub fn select(
        __nfds: ::std::os::raw::c_int,
        __readfds: *mut fd_set,
        __writefds: *mut fd_set,
        __exceptfds: *mut fd_set,
        __timeout: *mut timeval,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn pselect(
        __nfds: ::std::os::raw::c_int,
        __readfds: *mut fd_set,
        __writefds: *mut fd_set,
        __exceptfds: *mut fd_set,
        __timeout: *const timespec,
        __sigmask: *const __sigset_t,
    ) -> ::std::os::raw::c_int;
}
pub type blksize_t = __blksize_t;
pub type blkcnt_t = __blkcnt_t;
pub type fsblkcnt_t = __fsblkcnt_t;
pub type fsfilcnt_t = __fsfilcnt_t;
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct __pthread_internal_list {
    pub __prev: *mut __pthread_internal_list,
    pub __next: *mut __pthread_internal_list,
}
#[test]
fn bindgen_test_layout___pthread_internal_list() {
    const UNINIT: ::std::mem::MaybeUninit<__pthread_internal_list> =
        ::std::mem::MaybeUninit::uninit();
    let ptr = UNINIT.as_ptr();
    assert_eq!(
        ::std::mem::size_of::<__pthread_internal_list>(),
        16usize,
        concat!("Size of: ", stringify!(__pthread_internal_list))
    );
    assert_eq!(
        ::std::mem::align_of::<__pthread_internal_list>(),
        8usize,
        concat!("Alignment of ", stringify!(__pthread_internal_list))
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).__prev) as usize - ptr as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(__pthread_internal_list),
            "::",
            stringify!(__prev)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).__next) as usize - ptr as usize },
        8usize,
        concat!(
            "Offset of field: ",
            stringify!(__pthread_internal_list),
            "::",
            stringify!(__next)
        )
    );
}
impl Default for __pthread_internal_list {
    fn default() -> Self {
        let mut s = ::std::mem::MaybeUninit::<Self>::uninit();
        unsafe {
            ::std::ptr::write_bytes(s.as_mut_ptr(), 0, 1);
            s.assume_init()
        }
    }
}
pub type __pthread_list_t = __pthread_internal_list;
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct __pthread_internal_slist {
    pub __next: *mut __pthread_internal_slist,
}
#[test]
fn bindgen_test_layout___pthread_internal_slist() {
    const UNINIT: ::std::mem::MaybeUninit<__pthread_internal_slist> =
        ::std::mem::MaybeUninit::uninit();
    let ptr = UNINIT.as_ptr();
    assert_eq!(
        ::std::mem::size_of::<__pthread_internal_slist>(),
        8usize,
        concat!("Size of: ", stringify!(__pthread_internal_slist))
    );
    assert_eq!(
        ::std::mem::align_of::<__pthread_internal_slist>(),
        8usize,
        concat!("Alignment of ", stringify!(__pthread_internal_slist))
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).__next) as usize - ptr as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(__pthread_internal_slist),
            "::",
            stringify!(__next)
        )
    );
}
impl Default for __pthread_internal_slist {
    fn default() -> Self {
        let mut s = ::std::mem::MaybeUninit::<Self>::uninit();
        unsafe {
            ::std::ptr::write_bytes(s.as_mut_ptr(), 0, 1);
            s.assume_init()
        }
    }
}
pub type __pthread_slist_t = __pthread_internal_slist;
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct __pthread_mutex_s {
    pub __lock: ::std::os::raw::c_int,
    pub __count: ::std::os::raw::c_uint,
    pub __owner: ::std::os::raw::c_int,
    pub __nusers: ::std::os::raw::c_uint,
    pub __kind: ::std::os::raw::c_int,
    pub __spins: ::std::os::raw::c_short,
    pub __elision: ::std::os::raw::c_short,
    pub __list: __pthread_list_t,
}
#[test]
fn bindgen_test_layout___pthread_mutex_s() {
    const UNINIT: ::std::mem::MaybeUninit<__pthread_mutex_s> = ::std::mem::MaybeUninit::uninit();
    let ptr = UNINIT.as_ptr();
    assert_eq!(
        ::std::mem::size_of::<__pthread_mutex_s>(),
        40usize,
        concat!("Size of: ", stringify!(__pthread_mutex_s))
    );
    assert_eq!(
        ::std::mem::align_of::<__pthread_mutex_s>(),
        8usize,
        concat!("Alignment of ", stringify!(__pthread_mutex_s))
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).__lock) as usize - ptr as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(__pthread_mutex_s),
            "::",
            stringify!(__lock)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).__count) as usize - ptr as usize },
        4usize,
        concat!(
            "Offset of field: ",
            stringify!(__pthread_mutex_s),
            "::",
            stringify!(__count)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).__owner) as usize - ptr as usize },
        8usize,
        concat!(
            "Offset of field: ",
            stringify!(__pthread_mutex_s),
            "::",
            stringify!(__owner)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).__nusers) as usize - ptr as usize },
        12usize,
        concat!(
            "Offset of field: ",
            stringify!(__pthread_mutex_s),
            "::",
            stringify!(__nusers)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).__kind) as usize - ptr as usize },
        16usize,
        concat!(
            "Offset of field: ",
            stringify!(__pthread_mutex_s),
            "::",
            stringify!(__kind)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).__spins) as usize - ptr as usize },
        20usize,
        concat!(
            "Offset of field: ",
            stringify!(__pthread_mutex_s),
            "::",
            stringify!(__spins)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).__elision) as usize - ptr as usize },
        22usize,
        concat!(
            "Offset of field: ",
            stringify!(__pthread_mutex_s),
            "::",
            stringify!(__elision)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).__list) as usize - ptr as usize },
        24usize,
        concat!(
            "Offset of field: ",
            stringify!(__pthread_mutex_s),
            "::",
            stringify!(__list)
        )
    );
}
impl Default for __pthread_mutex_s {
    fn default() -> Self {
        let mut s = ::std::mem::MaybeUninit::<Self>::uninit();
        unsafe {
            ::std::ptr::write_bytes(s.as_mut_ptr(), 0, 1);
            s.assume_init()
        }
    }
}
#[repr(C)]
#[derive(Debug, Default, Copy, Clone)]
pub struct __pthread_rwlock_arch_t {
    pub __readers: ::std::os::raw::c_uint,
    pub __writers: ::std::os::raw::c_uint,
    pub __wrphase_futex: ::std::os::raw::c_uint,
    pub __writers_futex: ::std::os::raw::c_uint,
    pub __pad3: ::std::os::raw::c_uint,
    pub __pad4: ::std::os::raw::c_uint,
    pub __cur_writer: ::std::os::raw::c_int,
    pub __shared: ::std::os::raw::c_int,
    pub __rwelision: ::std::os::raw::c_schar,
    pub __pad1: [::std::os::raw::c_uchar; 7usize],
    pub __pad2: ::std::os::raw::c_ulong,
    pub __flags: ::std::os::raw::c_uint,
}
#[test]
fn bindgen_test_layout___pthread_rwlock_arch_t() {
    const UNINIT: ::std::mem::MaybeUninit<__pthread_rwlock_arch_t> =
        ::std::mem::MaybeUninit::uninit();
    let ptr = UNINIT.as_ptr();
    assert_eq!(
        ::std::mem::size_of::<__pthread_rwlock_arch_t>(),
        56usize,
        concat!("Size of: ", stringify!(__pthread_rwlock_arch_t))
    );
    assert_eq!(
        ::std::mem::align_of::<__pthread_rwlock_arch_t>(),
        8usize,
        concat!("Alignment of ", stringify!(__pthread_rwlock_arch_t))
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).__readers) as usize - ptr as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(__pthread_rwlock_arch_t),
            "::",
            stringify!(__readers)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).__writers) as usize - ptr as usize },
        4usize,
        concat!(
            "Offset of field: ",
            stringify!(__pthread_rwlock_arch_t),
            "::",
            stringify!(__writers)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).__wrphase_futex) as usize - ptr as usize },
        8usize,
        concat!(
            "Offset of field: ",
            stringify!(__pthread_rwlock_arch_t),
            "::",
            stringify!(__wrphase_futex)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).__writers_futex) as usize - ptr as usize },
        12usize,
        concat!(
            "Offset of field: ",
            stringify!(__pthread_rwlock_arch_t),
            "::",
            stringify!(__writers_futex)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).__pad3) as usize - ptr as usize },
        16usize,
        concat!(
            "Offset of field: ",
            stringify!(__pthread_rwlock_arch_t),
            "::",
            stringify!(__pad3)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).__pad4) as usize - ptr as usize },
        20usize,
        concat!(
            "Offset of field: ",
            stringify!(__pthread_rwlock_arch_t),
            "::",
            stringify!(__pad4)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).__cur_writer) as usize - ptr as usize },
        24usize,
        concat!(
            "Offset of field: ",
            stringify!(__pthread_rwlock_arch_t),
            "::",
            stringify!(__cur_writer)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).__shared) as usize - ptr as usize },
        28usize,
        concat!(
            "Offset of field: ",
            stringify!(__pthread_rwlock_arch_t),
            "::",
            stringify!(__shared)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).__rwelision) as usize - ptr as usize },
        32usize,
        concat!(
            "Offset of field: ",
            stringify!(__pthread_rwlock_arch_t),
            "::",
            stringify!(__rwelision)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).__pad1) as usize - ptr as usize },
        33usize,
        concat!(
            "Offset of field: ",
            stringify!(__pthread_rwlock_arch_t),
            "::",
            stringify!(__pad1)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).__pad2) as usize - ptr as usize },
        40usize,
        concat!(
            "Offset of field: ",
            stringify!(__pthread_rwlock_arch_t),
            "::",
            stringify!(__pad2)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).__flags) as usize - ptr as usize },
        48usize,
        concat!(
            "Offset of field: ",
            stringify!(__pthread_rwlock_arch_t),
            "::",
            stringify!(__flags)
        )
    );
}
#[repr(C)]
#[derive(Copy, Clone)]
pub struct __pthread_cond_s {
    pub __bindgen_anon_1: __pthread_cond_s__bindgen_ty_1,
    pub __bindgen_anon_2: __pthread_cond_s__bindgen_ty_2,
    pub __g_refs: [::std::os::raw::c_uint; 2usize],
    pub __g_size: [::std::os::raw::c_uint; 2usize],
    pub __g1_orig_size: ::std::os::raw::c_uint,
    pub __wrefs: ::std::os::raw::c_uint,
    pub __g_signals: [::std::os::raw::c_uint; 2usize],
}
#[repr(C)]
#[derive(Copy, Clone)]
pub union __pthread_cond_s__bindgen_ty_1 {
    pub __wseq: ::std::os::raw::c_ulonglong,
    pub __wseq32: __pthread_cond_s__bindgen_ty_1__bindgen_ty_1,
}
#[repr(C)]
#[derive(Debug, Default, Copy, Clone)]
pub struct __pthread_cond_s__bindgen_ty_1__bindgen_ty_1 {
    pub __low: ::std::os::raw::c_uint,
    pub __high: ::std::os::raw::c_uint,
}
#[test]
fn bindgen_test_layout___pthread_cond_s__bindgen_ty_1__bindgen_ty_1() {
    const UNINIT: ::std::mem::MaybeUninit<__pthread_cond_s__bindgen_ty_1__bindgen_ty_1> =
        ::std::mem::MaybeUninit::uninit();
    let ptr = UNINIT.as_ptr();
    assert_eq!(
        ::std::mem::size_of::<__pthread_cond_s__bindgen_ty_1__bindgen_ty_1>(),
        8usize,
        concat!(
            "Size of: ",
            stringify!(__pthread_cond_s__bindgen_ty_1__bindgen_ty_1)
        )
    );
    assert_eq!(
        ::std::mem::align_of::<__pthread_cond_s__bindgen_ty_1__bindgen_ty_1>(),
        4usize,
        concat!(
            "Alignment of ",
            stringify!(__pthread_cond_s__bindgen_ty_1__bindgen_ty_1)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).__low) as usize - ptr as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(__pthread_cond_s__bindgen_ty_1__bindgen_ty_1),
            "::",
            stringify!(__low)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).__high) as usize - ptr as usize },
        4usize,
        concat!(
            "Offset of field: ",
            stringify!(__pthread_cond_s__bindgen_ty_1__bindgen_ty_1),
            "::",
            stringify!(__high)
        )
    );
}
#[test]
fn bindgen_test_layout___pthread_cond_s__bindgen_ty_1() {
    const UNINIT: ::std::mem::MaybeUninit<__pthread_cond_s__bindgen_ty_1> =
        ::std::mem::MaybeUninit::uninit();
    let ptr = UNINIT.as_ptr();
    assert_eq!(
        ::std::mem::size_of::<__pthread_cond_s__bindgen_ty_1>(),
        8usize,
        concat!("Size of: ", stringify!(__pthread_cond_s__bindgen_ty_1))
    );
    assert_eq!(
        ::std::mem::align_of::<__pthread_cond_s__bindgen_ty_1>(),
        8usize,
        concat!("Alignment of ", stringify!(__pthread_cond_s__bindgen_ty_1))
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).__wseq) as usize - ptr as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(__pthread_cond_s__bindgen_ty_1),
            "::",
            stringify!(__wseq)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).__wseq32) as usize - ptr as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(__pthread_cond_s__bindgen_ty_1),
            "::",
            stringify!(__wseq32)
        )
    );
}
impl Default for __pthread_cond_s__bindgen_ty_1 {
    fn default() -> Self {
        let mut s = ::std::mem::MaybeUninit::<Self>::uninit();
        unsafe {
            ::std::ptr::write_bytes(s.as_mut_ptr(), 0, 1);
            s.assume_init()
        }
    }
}
#[repr(C)]
#[derive(Copy, Clone)]
pub union __pthread_cond_s__bindgen_ty_2 {
    pub __g1_start: ::std::os::raw::c_ulonglong,
    pub __g1_start32: __pthread_cond_s__bindgen_ty_2__bindgen_ty_1,
}
#[repr(C)]
#[derive(Debug, Default, Copy, Clone)]
pub struct __pthread_cond_s__bindgen_ty_2__bindgen_ty_1 {
    pub __low: ::std::os::raw::c_uint,
    pub __high: ::std::os::raw::c_uint,
}
#[test]
fn bindgen_test_layout___pthread_cond_s__bindgen_ty_2__bindgen_ty_1() {
    const UNINIT: ::std::mem::MaybeUninit<__pthread_cond_s__bindgen_ty_2__bindgen_ty_1> =
        ::std::mem::MaybeUninit::uninit();
    let ptr = UNINIT.as_ptr();
    assert_eq!(
        ::std::mem::size_of::<__pthread_cond_s__bindgen_ty_2__bindgen_ty_1>(),
        8usize,
        concat!(
            "Size of: ",
            stringify!(__pthread_cond_s__bindgen_ty_2__bindgen_ty_1)
        )
    );
    assert_eq!(
        ::std::mem::align_of::<__pthread_cond_s__bindgen_ty_2__bindgen_ty_1>(),
        4usize,
        concat!(
            "Alignment of ",
            stringify!(__pthread_cond_s__bindgen_ty_2__bindgen_ty_1)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).__low) as usize - ptr as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(__pthread_cond_s__bindgen_ty_2__bindgen_ty_1),
            "::",
            stringify!(__low)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).__high) as usize - ptr as usize },
        4usize,
        concat!(
            "Offset of field: ",
            stringify!(__pthread_cond_s__bindgen_ty_2__bindgen_ty_1),
            "::",
            stringify!(__high)
        )
    );
}
#[test]
fn bindgen_test_layout___pthread_cond_s__bindgen_ty_2() {
    const UNINIT: ::std::mem::MaybeUninit<__pthread_cond_s__bindgen_ty_2> =
        ::std::mem::MaybeUninit::uninit();
    let ptr = UNINIT.as_ptr();
    assert_eq!(
        ::std::mem::size_of::<__pthread_cond_s__bindgen_ty_2>(),
        8usize,
        concat!("Size of: ", stringify!(__pthread_cond_s__bindgen_ty_2))
    );
    assert_eq!(
        ::std::mem::align_of::<__pthread_cond_s__bindgen_ty_2>(),
        8usize,
        concat!("Alignment of ", stringify!(__pthread_cond_s__bindgen_ty_2))
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).__g1_start) as usize - ptr as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(__pthread_cond_s__bindgen_ty_2),
            "::",
            stringify!(__g1_start)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).__g1_start32) as usize - ptr as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(__pthread_cond_s__bindgen_ty_2),
            "::",
            stringify!(__g1_start32)
        )
    );
}
impl Default for __pthread_cond_s__bindgen_ty_2 {
    fn default() -> Self {
        let mut s = ::std::mem::MaybeUninit::<Self>::uninit();
        unsafe {
            ::std::ptr::write_bytes(s.as_mut_ptr(), 0, 1);
            s.assume_init()
        }
    }
}
#[test]
fn bindgen_test_layout___pthread_cond_s() {
    const UNINIT: ::std::mem::MaybeUninit<__pthread_cond_s> = ::std::mem::MaybeUninit::uninit();
    let ptr = UNINIT.as_ptr();
    assert_eq!(
        ::std::mem::size_of::<__pthread_cond_s>(),
        48usize,
        concat!("Size of: ", stringify!(__pthread_cond_s))
    );
    assert_eq!(
        ::std::mem::align_of::<__pthread_cond_s>(),
        8usize,
        concat!("Alignment of ", stringify!(__pthread_cond_s))
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).__g_refs) as usize - ptr as usize },
        16usize,
        concat!(
            "Offset of field: ",
            stringify!(__pthread_cond_s),
            "::",
            stringify!(__g_refs)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).__g_size) as usize - ptr as usize },
        24usize,
        concat!(
            "Offset of field: ",
            stringify!(__pthread_cond_s),
            "::",
            stringify!(__g_size)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).__g1_orig_size) as usize - ptr as usize },
        32usize,
        concat!(
            "Offset of field: ",
            stringify!(__pthread_cond_s),
            "::",
            stringify!(__g1_orig_size)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).__wrefs) as usize - ptr as usize },
        36usize,
        concat!(
            "Offset of field: ",
            stringify!(__pthread_cond_s),
            "::",
            stringify!(__wrefs)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).__g_signals) as usize - ptr as usize },
        40usize,
        concat!(
            "Offset of field: ",
            stringify!(__pthread_cond_s),
            "::",
            stringify!(__g_signals)
        )
    );
}
impl Default for __pthread_cond_s {
    fn default() -> Self {
        let mut s = ::std::mem::MaybeUninit::<Self>::uninit();
        unsafe {
            ::std::ptr::write_bytes(s.as_mut_ptr(), 0, 1);
            s.assume_init()
        }
    }
}
pub type pthread_t = ::std::os::raw::c_ulong;
#[repr(C)]
#[derive(Copy, Clone)]
pub union pthread_mutexattr_t {
    pub __size: [::std::os::raw::c_char; 4usize],
    pub __align: ::std::os::raw::c_int,
}
#[test]
fn bindgen_test_layout_pthread_mutexattr_t() {
    const UNINIT: ::std::mem::MaybeUninit<pthread_mutexattr_t> = ::std::mem::MaybeUninit::uninit();
    let ptr = UNINIT.as_ptr();
    assert_eq!(
        ::std::mem::size_of::<pthread_mutexattr_t>(),
        4usize,
        concat!("Size of: ", stringify!(pthread_mutexattr_t))
    );
    assert_eq!(
        ::std::mem::align_of::<pthread_mutexattr_t>(),
        4usize,
        concat!("Alignment of ", stringify!(pthread_mutexattr_t))
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).__size) as usize - ptr as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(pthread_mutexattr_t),
            "::",
            stringify!(__size)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).__align) as usize - ptr as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(pthread_mutexattr_t),
            "::",
            stringify!(__align)
        )
    );
}
impl Default for pthread_mutexattr_t {
    fn default() -> Self {
        let mut s = ::std::mem::MaybeUninit::<Self>::uninit();
        unsafe {
            ::std::ptr::write_bytes(s.as_mut_ptr(), 0, 1);
            s.assume_init()
        }
    }
}
#[repr(C)]
#[derive(Copy, Clone)]
pub union pthread_condattr_t {
    pub __size: [::std::os::raw::c_char; 4usize],
    pub __align: ::std::os::raw::c_int,
}
#[test]
fn bindgen_test_layout_pthread_condattr_t() {
    const UNINIT: ::std::mem::MaybeUninit<pthread_condattr_t> = ::std::mem::MaybeUninit::uninit();
    let ptr = UNINIT.as_ptr();
    assert_eq!(
        ::std::mem::size_of::<pthread_condattr_t>(),
        4usize,
        concat!("Size of: ", stringify!(pthread_condattr_t))
    );
    assert_eq!(
        ::std::mem::align_of::<pthread_condattr_t>(),
        4usize,
        concat!("Alignment of ", stringify!(pthread_condattr_t))
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).__size) as usize - ptr as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(pthread_condattr_t),
            "::",
            stringify!(__size)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).__align) as usize - ptr as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(pthread_condattr_t),
            "::",
            stringify!(__align)
        )
    );
}
impl Default for pthread_condattr_t {
    fn default() -> Self {
        let mut s = ::std::mem::MaybeUninit::<Self>::uninit();
        unsafe {
            ::std::ptr::write_bytes(s.as_mut_ptr(), 0, 1);
            s.assume_init()
        }
    }
}
pub type pthread_key_t = ::std::os::raw::c_uint;
pub type pthread_once_t = ::std::os::raw::c_int;
#[repr(C)]
#[derive(Copy, Clone)]
pub union pthread_attr_t {
    pub __size: [::std::os::raw::c_char; 56usize],
    pub __align: ::std::os::raw::c_long,
}
#[test]
fn bindgen_test_layout_pthread_attr_t() {
    const UNINIT: ::std::mem::MaybeUninit<pthread_attr_t> = ::std::mem::MaybeUninit::uninit();
    let ptr = UNINIT.as_ptr();
    assert_eq!(
        ::std::mem::size_of::<pthread_attr_t>(),
        56usize,
        concat!("Size of: ", stringify!(pthread_attr_t))
    );
    assert_eq!(
        ::std::mem::align_of::<pthread_attr_t>(),
        8usize,
        concat!("Alignment of ", stringify!(pthread_attr_t))
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).__size) as usize - ptr as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(pthread_attr_t),
            "::",
            stringify!(__size)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).__align) as usize - ptr as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(pthread_attr_t),
            "::",
            stringify!(__align)
        )
    );
}
impl Default for pthread_attr_t {
    fn default() -> Self {
        let mut s = ::std::mem::MaybeUninit::<Self>::uninit();
        unsafe {
            ::std::ptr::write_bytes(s.as_mut_ptr(), 0, 1);
            s.assume_init()
        }
    }
}
#[repr(C)]
#[derive(Copy, Clone)]
pub union pthread_mutex_t {
    pub __data: __pthread_mutex_s,
    pub __size: [::std::os::raw::c_char; 40usize],
    pub __align: ::std::os::raw::c_long,
}
#[test]
fn bindgen_test_layout_pthread_mutex_t() {
    const UNINIT: ::std::mem::MaybeUninit<pthread_mutex_t> = ::std::mem::MaybeUninit::uninit();
    let ptr = UNINIT.as_ptr();
    assert_eq!(
        ::std::mem::size_of::<pthread_mutex_t>(),
        40usize,
        concat!("Size of: ", stringify!(pthread_mutex_t))
    );
    assert_eq!(
        ::std::mem::align_of::<pthread_mutex_t>(),
        8usize,
        concat!("Alignment of ", stringify!(pthread_mutex_t))
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).__data) as usize - ptr as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(pthread_mutex_t),
            "::",
            stringify!(__data)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).__size) as usize - ptr as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(pthread_mutex_t),
            "::",
            stringify!(__size)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).__align) as usize - ptr as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(pthread_mutex_t),
            "::",
            stringify!(__align)
        )
    );
}
impl Default for pthread_mutex_t {
    fn default() -> Self {
        let mut s = ::std::mem::MaybeUninit::<Self>::uninit();
        unsafe {
            ::std::ptr::write_bytes(s.as_mut_ptr(), 0, 1);
            s.assume_init()
        }
    }
}
#[repr(C)]
#[derive(Copy, Clone)]
pub union pthread_cond_t {
    pub __data: __pthread_cond_s,
    pub __size: [::std::os::raw::c_char; 48usize],
    pub __align: ::std::os::raw::c_longlong,
}
#[test]
fn bindgen_test_layout_pthread_cond_t() {
    const UNINIT: ::std::mem::MaybeUninit<pthread_cond_t> = ::std::mem::MaybeUninit::uninit();
    let ptr = UNINIT.as_ptr();
    assert_eq!(
        ::std::mem::size_of::<pthread_cond_t>(),
        48usize,
        concat!("Size of: ", stringify!(pthread_cond_t))
    );
    assert_eq!(
        ::std::mem::align_of::<pthread_cond_t>(),
        8usize,
        concat!("Alignment of ", stringify!(pthread_cond_t))
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).__data) as usize - ptr as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(pthread_cond_t),
            "::",
            stringify!(__data)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).__size) as usize - ptr as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(pthread_cond_t),
            "::",
            stringify!(__size)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).__align) as usize - ptr as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(pthread_cond_t),
            "::",
            stringify!(__align)
        )
    );
}
impl Default for pthread_cond_t {
    fn default() -> Self {
        let mut s = ::std::mem::MaybeUninit::<Self>::uninit();
        unsafe {
            ::std::ptr::write_bytes(s.as_mut_ptr(), 0, 1);
            s.assume_init()
        }
    }
}
#[repr(C)]
#[derive(Copy, Clone)]
pub union pthread_rwlock_t {
    pub __data: __pthread_rwlock_arch_t,
    pub __size: [::std::os::raw::c_char; 56usize],
    pub __align: ::std::os::raw::c_long,
}
#[test]
fn bindgen_test_layout_pthread_rwlock_t() {
    const UNINIT: ::std::mem::MaybeUninit<pthread_rwlock_t> = ::std::mem::MaybeUninit::uninit();
    let ptr = UNINIT.as_ptr();
    assert_eq!(
        ::std::mem::size_of::<pthread_rwlock_t>(),
        56usize,
        concat!("Size of: ", stringify!(pthread_rwlock_t))
    );
    assert_eq!(
        ::std::mem::align_of::<pthread_rwlock_t>(),
        8usize,
        concat!("Alignment of ", stringify!(pthread_rwlock_t))
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).__data) as usize - ptr as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(pthread_rwlock_t),
            "::",
            stringify!(__data)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).__size) as usize - ptr as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(pthread_rwlock_t),
            "::",
            stringify!(__size)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).__align) as usize - ptr as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(pthread_rwlock_t),
            "::",
            stringify!(__align)
        )
    );
}
impl Default for pthread_rwlock_t {
    fn default() -> Self {
        let mut s = ::std::mem::MaybeUninit::<Self>::uninit();
        unsafe {
            ::std::ptr::write_bytes(s.as_mut_ptr(), 0, 1);
            s.assume_init()
        }
    }
}
#[repr(C)]
#[derive(Copy, Clone)]
pub union pthread_rwlockattr_t {
    pub __size: [::std::os::raw::c_char; 8usize],
    pub __align: ::std::os::raw::c_long,
}
#[test]
fn bindgen_test_layout_pthread_rwlockattr_t() {
    const UNINIT: ::std::mem::MaybeUninit<pthread_rwlockattr_t> = ::std::mem::MaybeUninit::uninit();
    let ptr = UNINIT.as_ptr();
    assert_eq!(
        ::std::mem::size_of::<pthread_rwlockattr_t>(),
        8usize,
        concat!("Size of: ", stringify!(pthread_rwlockattr_t))
    );
    assert_eq!(
        ::std::mem::align_of::<pthread_rwlockattr_t>(),
        8usize,
        concat!("Alignment of ", stringify!(pthread_rwlockattr_t))
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).__size) as usize - ptr as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(pthread_rwlockattr_t),
            "::",
            stringify!(__size)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).__align) as usize - ptr as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(pthread_rwlockattr_t),
            "::",
            stringify!(__align)
        )
    );
}
impl Default for pthread_rwlockattr_t {
    fn default() -> Self {
        let mut s = ::std::mem::MaybeUninit::<Self>::uninit();
        unsafe {
            ::std::ptr::write_bytes(s.as_mut_ptr(), 0, 1);
            s.assume_init()
        }
    }
}
pub type pthread_spinlock_t = ::std::os::raw::c_int;
#[repr(C)]
#[derive(Copy, Clone)]
pub union pthread_barrier_t {
    pub __size: [::std::os::raw::c_char; 32usize],
    pub __align: ::std::os::raw::c_long,
}
#[test]
fn bindgen_test_layout_pthread_barrier_t() {
    const UNINIT: ::std::mem::MaybeUninit<pthread_barrier_t> = ::std::mem::MaybeUninit::uninit();
    let ptr = UNINIT.as_ptr();
    assert_eq!(
        ::std::mem::size_of::<pthread_barrier_t>(),
        32usize,
        concat!("Size of: ", stringify!(pthread_barrier_t))
    );
    assert_eq!(
        ::std::mem::align_of::<pthread_barrier_t>(),
        8usize,
        concat!("Alignment of ", stringify!(pthread_barrier_t))
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).__size) as usize - ptr as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(pthread_barrier_t),
            "::",
            stringify!(__size)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).__align) as usize - ptr as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(pthread_barrier_t),
            "::",
            stringify!(__align)
        )
    );
}
impl Default for pthread_barrier_t {
    fn default() -> Self {
        let mut s = ::std::mem::MaybeUninit::<Self>::uninit();
        unsafe {
            ::std::ptr::write_bytes(s.as_mut_ptr(), 0, 1);
            s.assume_init()
        }
    }
}
#[repr(C)]
#[derive(Copy, Clone)]
pub union pthread_barrierattr_t {
    pub __size: [::std::os::raw::c_char; 4usize],
    pub __align: ::std::os::raw::c_int,
}
#[test]
fn bindgen_test_layout_pthread_barrierattr_t() {
    const UNINIT: ::std::mem::MaybeUninit<pthread_barrierattr_t> =
        ::std::mem::MaybeUninit::uninit();
    let ptr = UNINIT.as_ptr();
    assert_eq!(
        ::std::mem::size_of::<pthread_barrierattr_t>(),
        4usize,
        concat!("Size of: ", stringify!(pthread_barrierattr_t))
    );
    assert_eq!(
        ::std::mem::align_of::<pthread_barrierattr_t>(),
        4usize,
        concat!("Alignment of ", stringify!(pthread_barrierattr_t))
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).__size) as usize - ptr as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(pthread_barrierattr_t),
            "::",
            stringify!(__size)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).__align) as usize - ptr as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(pthread_barrierattr_t),
            "::",
            stringify!(__align)
        )
    );
}
impl Default for pthread_barrierattr_t {
    fn default() -> Self {
        let mut s = ::std::mem::MaybeUninit::<Self>::uninit();
        unsafe {
            ::std::ptr::write_bytes(s.as_mut_ptr(), 0, 1);
            s.assume_init()
        }
    }
}
extern "C" {
    pub fn random() -> ::std::os::raw::c_long;
}
extern "C" {
    pub fn srandom(__seed: ::std::os::raw::c_uint);
}
extern "C" {
    pub fn initstate(
        __seed: ::std::os::raw::c_uint,
        __statebuf: *mut ::std::os::raw::c_char,
        __statelen: usize,
    ) -> *mut ::std::os::raw::c_char;
}
extern "C" {
    pub fn setstate(__statebuf: *mut ::std::os::raw::c_char) -> *mut ::std::os::raw::c_char;
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct random_data {
    pub fptr: *mut i32,
    pub rptr: *mut i32,
    pub state: *mut i32,
    pub rand_type: ::std::os::raw::c_int,
    pub rand_deg: ::std::os::raw::c_int,
    pub rand_sep: ::std::os::raw::c_int,
    pub end_ptr: *mut i32,
}
#[test]
fn bindgen_test_layout_random_data() {
    const UNINIT: ::std::mem::MaybeUninit<random_data> = ::std::mem::MaybeUninit::uninit();
    let ptr = UNINIT.as_ptr();
    assert_eq!(
        ::std::mem::size_of::<random_data>(),
        48usize,
        concat!("Size of: ", stringify!(random_data))
    );
    assert_eq!(
        ::std::mem::align_of::<random_data>(),
        8usize,
        concat!("Alignment of ", stringify!(random_data))
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).fptr) as usize - ptr as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(random_data),
            "::",
            stringify!(fptr)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).rptr) as usize - ptr as usize },
        8usize,
        concat!(
            "Offset of field: ",
            stringify!(random_data),
            "::",
            stringify!(rptr)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).state) as usize - ptr as usize },
        16usize,
        concat!(
            "Offset of field: ",
            stringify!(random_data),
            "::",
            stringify!(state)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).rand_type) as usize - ptr as usize },
        24usize,
        concat!(
            "Offset of field: ",
            stringify!(random_data),
            "::",
            stringify!(rand_type)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).rand_deg) as usize - ptr as usize },
        28usize,
        concat!(
            "Offset of field: ",
            stringify!(random_data),
            "::",
            stringify!(rand_deg)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).rand_sep) as usize - ptr as usize },
        32usize,
        concat!(
            "Offset of field: ",
            stringify!(random_data),
            "::",
            stringify!(rand_sep)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).end_ptr) as usize - ptr as usize },
        40usize,
        concat!(
            "Offset of field: ",
            stringify!(random_data),
            "::",
            stringify!(end_ptr)
        )
    );
}
impl Default for random_data {
    fn default() -> Self {
        let mut s = ::std::mem::MaybeUninit::<Self>::uninit();
        unsafe {
            ::std::ptr::write_bytes(s.as_mut_ptr(), 0, 1);
            s.assume_init()
        }
    }
}
extern "C" {
    pub fn random_r(__buf: *mut random_data, __result: *mut i32) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn srandom_r(
        __seed: ::std::os::raw::c_uint,
        __buf: *mut random_data,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn initstate_r(
        __seed: ::std::os::raw::c_uint,
        __statebuf: *mut ::std::os::raw::c_char,
        __statelen: usize,
        __buf: *mut random_data,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn setstate_r(
        __statebuf: *mut ::std::os::raw::c_char,
        __buf: *mut random_data,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn rand() -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn srand(__seed: ::std::os::raw::c_uint);
}
extern "C" {
    pub fn rand_r(__seed: *mut ::std::os::raw::c_uint) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn drand48() -> f64;
}
extern "C" {
    pub fn erand48(__xsubi: *mut ::std::os::raw::c_ushort) -> f64;
}
extern "C" {
    pub fn lrand48() -> ::std::os::raw::c_long;
}
extern "C" {
    pub fn nrand48(__xsubi: *mut ::std::os::raw::c_ushort) -> ::std::os::raw::c_long;
}
extern "C" {
    pub fn mrand48() -> ::std::os::raw::c_long;
}
extern "C" {
    pub fn jrand48(__xsubi: *mut ::std::os::raw::c_ushort) -> ::std::os::raw::c_long;
}
extern "C" {
    pub fn srand48(__seedval: ::std::os::raw::c_long);
}
extern "C" {
    pub fn seed48(__seed16v: *mut ::std::os::raw::c_ushort) -> *mut ::std::os::raw::c_ushort;
}
extern "C" {
    pub fn lcong48(__param: *mut ::std::os::raw::c_ushort);
}
#[repr(C)]
#[derive(Debug, Default, Copy, Clone)]
pub struct drand48_data {
    pub __x: [::std::os::raw::c_ushort; 3usize],
    pub __old_x: [::std::os::raw::c_ushort; 3usize],
    pub __c: ::std::os::raw::c_ushort,
    pub __init: ::std::os::raw::c_ushort,
    pub __a: ::std::os::raw::c_ulonglong,
}
#[test]
fn bindgen_test_layout_drand48_data() {
    const UNINIT: ::std::mem::MaybeUninit<drand48_data> = ::std::mem::MaybeUninit::uninit();
    let ptr = UNINIT.as_ptr();
    assert_eq!(
        ::std::mem::size_of::<drand48_data>(),
        24usize,
        concat!("Size of: ", stringify!(drand48_data))
    );
    assert_eq!(
        ::std::mem::align_of::<drand48_data>(),
        8usize,
        concat!("Alignment of ", stringify!(drand48_data))
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).__x) as usize - ptr as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(drand48_data),
            "::",
            stringify!(__x)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).__old_x) as usize - ptr as usize },
        6usize,
        concat!(
            "Offset of field: ",
            stringify!(drand48_data),
            "::",
            stringify!(__old_x)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).__c) as usize - ptr as usize },
        12usize,
        concat!(
            "Offset of field: ",
            stringify!(drand48_data),
            "::",
            stringify!(__c)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).__init) as usize - ptr as usize },
        14usize,
        concat!(
            "Offset of field: ",
            stringify!(drand48_data),
            "::",
            stringify!(__init)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).__a) as usize - ptr as usize },
        16usize,
        concat!(
            "Offset of field: ",
            stringify!(drand48_data),
            "::",
            stringify!(__a)
        )
    );
}
extern "C" {
    pub fn drand48_r(__buffer: *mut drand48_data, __result: *mut f64) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn erand48_r(
        __xsubi: *mut ::std::os::raw::c_ushort,
        __buffer: *mut drand48_data,
        __result: *mut f64,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn lrand48_r(
        __buffer: *mut drand48_data,
        __result: *mut ::std::os::raw::c_long,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn nrand48_r(
        __xsubi: *mut ::std::os::raw::c_ushort,
        __buffer: *mut drand48_data,
        __result: *mut ::std::os::raw::c_long,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn mrand48_r(
        __buffer: *mut drand48_data,
        __result: *mut ::std::os::raw::c_long,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn jrand48_r(
        __xsubi: *mut ::std::os::raw::c_ushort,
        __buffer: *mut drand48_data,
        __result: *mut ::std::os::raw::c_long,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn srand48_r(
        __seedval: ::std::os::raw::c_long,
        __buffer: *mut drand48_data,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn seed48_r(
        __seed16v: *mut ::std::os::raw::c_ushort,
        __buffer: *mut drand48_data,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn lcong48_r(
        __param: *mut ::std::os::raw::c_ushort,
        __buffer: *mut drand48_data,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn malloc(__size: ::std::os::raw::c_ulong) -> *mut ::std::os::raw::c_void;
}
extern "C" {
    pub fn calloc(
        __nmemb: ::std::os::raw::c_ulong,
        __size: ::std::os::raw::c_ulong,
    ) -> *mut ::std::os::raw::c_void;
}
extern "C" {
    pub fn realloc(
        __ptr: *mut ::std::os::raw::c_void,
        __size: ::std::os::raw::c_ulong,
    ) -> *mut ::std::os::raw::c_void;
}
extern "C" {
    pub fn reallocarray(
        __ptr: *mut ::std::os::raw::c_void,
        __nmemb: usize,
        __size: usize,
    ) -> *mut ::std::os::raw::c_void;
}
extern "C" {
    pub fn free(__ptr: *mut ::std::os::raw::c_void);
}
extern "C" {
    pub fn alloca(__size: ::std::os::raw::c_ulong) -> *mut ::std::os::raw::c_void;
}
extern "C" {
    pub fn valloc(__size: usize) -> *mut ::std::os::raw::c_void;
}
extern "C" {
    pub fn posix_memalign(
        __memptr: *mut *mut ::std::os::raw::c_void,
        __alignment: usize,
        __size: usize,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn aligned_alloc(__alignment: usize, __size: usize) -> *mut ::std::os::raw::c_void;
}
extern "C" {
    pub fn abort() -> !;
}
extern "C" {
    pub fn atexit(__func: ::std::option::Option<unsafe extern "C" fn()>) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn at_quick_exit(
        __func: ::std::option::Option<unsafe extern "C" fn()>,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn on_exit(
        __func: ::std::option::Option<
            unsafe extern "C" fn(
                __status: ::std::os::raw::c_int,
                __arg: *mut ::std::os::raw::c_void,
            ),
        >,
        __arg: *mut ::std::os::raw::c_void,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn exit(__status: ::std::os::raw::c_int) -> !;
}
extern "C" {
    pub fn quick_exit(__status: ::std::os::raw::c_int) -> !;
}
extern "C" {
    pub fn _Exit(__status: ::std::os::raw::c_int) -> !;
}
extern "C" {
    pub fn getenv(__name: *const ::std::os::raw::c_char) -> *mut ::std::os::raw::c_char;
}
extern "C" {
    pub fn putenv(__string: *mut ::std::os::raw::c_char) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn setenv(
        __name: *const ::std::os::raw::c_char,
        __value: *const ::std::os::raw::c_char,
        __replace: ::std::os::raw::c_int,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn unsetenv(__name: *const ::std::os::raw::c_char) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn clearenv() -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn mktemp(__template: *mut ::std::os::raw::c_char) -> *mut ::std::os::raw::c_char;
}
extern "C" {
    pub fn mkstemp(__template: *mut ::std::os::raw::c_char) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn mkstemps(
        __template: *mut ::std::os::raw::c_char,
        __suffixlen: ::std::os::raw::c_int,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn mkdtemp(__template: *mut ::std::os::raw::c_char) -> *mut ::std::os::raw::c_char;
}
extern "C" {
    pub fn system(__command: *const ::std::os::raw::c_char) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn realpath(
        __name: *const ::std::os::raw::c_char,
        __resolved: *mut ::std::os::raw::c_char,
    ) -> *mut ::std::os::raw::c_char;
}
pub type __compar_fn_t = ::std::option::Option<
    unsafe extern "C" fn(
        arg1: *const ::std::os::raw::c_void,
        arg2: *const ::std::os::raw::c_void,
    ) -> ::std::os::raw::c_int,
>;
extern "C" {
    pub fn bsearch(
        __key: *const ::std::os::raw::c_void,
        __base: *const ::std::os::raw::c_void,
        __nmemb: usize,
        __size: usize,
        __compar: __compar_fn_t,
    ) -> *mut ::std::os::raw::c_void;
}
extern "C" {
    pub fn qsort(
        __base: *mut ::std::os::raw::c_void,
        __nmemb: usize,
        __size: usize,
        __compar: __compar_fn_t,
    );
}
extern "C" {
    pub fn abs(__x: ::std::os::raw::c_int) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn labs(__x: ::std::os::raw::c_long) -> ::std::os::raw::c_long;
}
extern "C" {
    pub fn llabs(__x: ::std::os::raw::c_longlong) -> ::std::os::raw::c_longlong;
}
extern "C" {
    pub fn div(__numer: ::std::os::raw::c_int, __denom: ::std::os::raw::c_int) -> div_t;
}
extern "C" {
    pub fn ldiv(__numer: ::std::os::raw::c_long, __denom: ::std::os::raw::c_long) -> ldiv_t;
}
extern "C" {
    pub fn lldiv(
        __numer: ::std::os::raw::c_longlong,
        __denom: ::std::os::raw::c_longlong,
    ) -> lldiv_t;
}
extern "C" {
    pub fn ecvt(
        __value: f64,
        __ndigit: ::std::os::raw::c_int,
        __decpt: *mut ::std::os::raw::c_int,
        __sign: *mut ::std::os::raw::c_int,
    ) -> *mut ::std::os::raw::c_char;
}
extern "C" {
    pub fn fcvt(
        __value: f64,
        __ndigit: ::std::os::raw::c_int,
        __decpt: *mut ::std::os::raw::c_int,
        __sign: *mut ::std::os::raw::c_int,
    ) -> *mut ::std::os::raw::c_char;
}
extern "C" {
    pub fn gcvt(
        __value: f64,
        __ndigit: ::std::os::raw::c_int,
        __buf: *mut ::std::os::raw::c_char,
    ) -> *mut ::std::os::raw::c_char;
}
extern "C" {
    pub fn qecvt(
        __value: u128,
        __ndigit: ::std::os::raw::c_int,
        __decpt: *mut ::std::os::raw::c_int,
        __sign: *mut ::std::os::raw::c_int,
    ) -> *mut ::std::os::raw::c_char;
}
extern "C" {
    pub fn qfcvt(
        __value: u128,
        __ndigit: ::std::os::raw::c_int,
        __decpt: *mut ::std::os::raw::c_int,
        __sign: *mut ::std::os::raw::c_int,
    ) -> *mut ::std::os::raw::c_char;
}
extern "C" {
    pub fn qgcvt(
        __value: u128,
        __ndigit: ::std::os::raw::c_int,
        __buf: *mut ::std::os::raw::c_char,
    ) -> *mut ::std::os::raw::c_char;
}
extern "C" {
    pub fn ecvt_r(
        __value: f64,
        __ndigit: ::std::os::raw::c_int,
        __decpt: *mut ::std::os::raw::c_int,
        __sign: *mut ::std::os::raw::c_int,
        __buf: *mut ::std::os::raw::c_char,
        __len: usize,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn fcvt_r(
        __value: f64,
        __ndigit: ::std::os::raw::c_int,
        __decpt: *mut ::std::os::raw::c_int,
        __sign: *mut ::std::os::raw::c_int,
        __buf: *mut ::std::os::raw::c_char,
        __len: usize,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn qecvt_r(
        __value: u128,
        __ndigit: ::std::os::raw::c_int,
        __decpt: *mut ::std::os::raw::c_int,
        __sign: *mut ::std::os::raw::c_int,
        __buf: *mut ::std::os::raw::c_char,
        __len: usize,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn qfcvt_r(
        __value: u128,
        __ndigit: ::std::os::raw::c_int,
        __decpt: *mut ::std::os::raw::c_int,
        __sign: *mut ::std::os::raw::c_int,
        __buf: *mut ::std::os::raw::c_char,
        __len: usize,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn mblen(__s: *const ::std::os::raw::c_char, __n: usize) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn mbtowc(
        __pwc: *mut wchar_t,
        __s: *const ::std::os::raw::c_char,
        __n: usize,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn wctomb(__s: *mut ::std::os::raw::c_char, __wchar: wchar_t) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn mbstowcs(__pwcs: *mut wchar_t, __s: *const ::std::os::raw::c_char, __n: usize) -> usize;
}
extern "C" {
    pub fn wcstombs(__s: *mut ::std::os::raw::c_char, __pwcs: *const wchar_t, __n: usize) -> usize;
}
extern "C" {
    pub fn rpmatch(__response: *const ::std::os::raw::c_char) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn getsubopt(
        __optionp: *mut *mut ::std::os::raw::c_char,
        __tokens: *const *mut ::std::os::raw::c_char,
        __valuep: *mut *mut ::std::os::raw::c_char,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn getloadavg(__loadavg: *mut f64, __nelem: ::std::os::raw::c_int)
        -> ::std::os::raw::c_int;
}
pub type int_least8_t = __int_least8_t;
pub type int_least16_t = __int_least16_t;
pub type int_least32_t = __int_least32_t;
pub type int_least64_t = __int_least64_t;
pub type uint_least8_t = __uint_least8_t;
pub type uint_least16_t = __uint_least16_t;
pub type uint_least32_t = __uint_least32_t;
pub type uint_least64_t = __uint_least64_t;
pub type int_fast8_t = ::std::os::raw::c_schar;
pub type int_fast16_t = ::std::os::raw::c_long;
pub type int_fast32_t = ::std::os::raw::c_long;
pub type int_fast64_t = ::std::os::raw::c_long;
pub type uint_fast8_t = ::std::os::raw::c_uchar;
pub type uint_fast16_t = ::std::os::raw::c_ulong;
pub type uint_fast32_t = ::std::os::raw::c_ulong;
pub type uint_fast64_t = ::std::os::raw::c_ulong;
pub type intmax_t = __intmax_t;
pub type uintmax_t = __uintmax_t;
pub type HANDLE = *mut ::std::os::raw::c_void;
pub type PHANDLE = *mut HANDLE;
pub type LPHANDLE = *mut HANDLE;
pub type USHORT = ::std::os::raw::c_ushort;
pub type DWORD = u32;
pub type BYTE = ::std::os::raw::c_uchar;
pub type byte = BYTE;
pub type WORD = ::std::os::raw::c_ushort;
pub type FLOAT = f32;
pub type PFLOAT = *mut f32;
pub type PBOOL = *mut ::std::os::raw::c_int;
pub type LPBOOL = *mut ::std::os::raw::c_int;
pub type PBYTE = *mut BYTE;
pub type LPBYTE = *mut BYTE;
pub type PINT = *mut ::std::os::raw::c_int;
pub type LPINT = *mut ::std::os::raw::c_int;
pub type PWORD = *mut WORD;
pub type LPWORD = *mut WORD;
pub type LPLONG = *mut i32;
pub type PDWORD = *mut DWORD;
pub type LPDWORD = *mut DWORD;
pub type LPVOID = *mut ::std::os::raw::c_void;
pub type PVOID = *mut ::std::os::raw::c_void;
pub type SIZE_T = usize;
pub type CHAR = ::std::os::raw::c_char;
pub type WCHAR = wchar_t;
pub type PCHAR = *mut ::std::os::raw::c_char;
pub type PSTR = *mut ::std::os::raw::c_char;
pub type UCHAR = ::std::os::raw::c_uchar;
pub type PUCHAR = *mut ::std::os::raw::c_uchar;
pub type SHORT = ::std::os::raw::c_short;
pub type LONG = i32;
pub type ULONG = u32;
pub type ULONGLONG = u64;
pub type ULONG64 = u64;
pub type LONGLONG = i64;
pub type BOOLEAN = BYTE;
pub type INT = ::std::os::raw::c_int;
pub type UINT = ::std::os::raw::c_uint;
pub type UINT8 = u8;
pub type UINT16 = u16;
pub type UINT32 = u32;
pub type UINT64 = u64;
pub type INT8 = i8;
pub type INT32 = i32;
pub type INT64 = i64;
pub type PUINT = *mut ::std::os::raw::c_uint;
pub type LPCSTR = *const ::std::os::raw::c_char;
pub type LPSTR = *mut ::std::os::raw::c_char;
pub type LPWSTR = *mut wchar_t;
pub type LPCWSTR = *const wchar_t;
pub type DWORDLONG = ULONGLONG;
pub type PDWORDLONG = *mut ULONGLONG;
pub type UINT_PTR = ::std::os::raw::c_ulong;
pub type LONG_PTR = ::std::os::raw::c_long;
pub type LPCTSTR = LPCSTR;
pub type LPTSTR = LPSTR;
pub type ULONG_PTR = ::std::os::raw::c_ulong;
#[repr(C)]
#[derive(Debug, Default, Copy, Clone)]
pub struct tagSIZE {
    pub cx: LONG,
    pub cy: LONG,
}
#[test]
fn bindgen_test_layout_tagSIZE() {
    const UNINIT: ::std::mem::MaybeUninit<tagSIZE> = ::std::mem::MaybeUninit::uninit();
    let ptr = UNINIT.as_ptr();
    assert_eq!(
        ::std::mem::size_of::<tagSIZE>(),
        8usize,
        concat!("Size of: ", stringify!(tagSIZE))
    );
    assert_eq!(
        ::std::mem::align_of::<tagSIZE>(),
        4usize,
        concat!("Alignment of ", stringify!(tagSIZE))
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).cx) as usize - ptr as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(tagSIZE),
            "::",
            stringify!(cx)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).cy) as usize - ptr as usize },
        4usize,
        concat!(
            "Offset of field: ",
            stringify!(tagSIZE),
            "::",
            stringify!(cy)
        )
    );
}
pub type SIZE = tagSIZE;
pub type PSIZE = *mut tagSIZE;
pub type LPSIZE = *mut tagSIZE;
#[repr(C)]
#[repr(align(16))]
#[derive(Debug, Default, Copy, Clone)]
pub struct max_align_t {
    pub __clang_max_align_nonce1: ::std::os::raw::c_longlong,
    pub __bindgen_padding_0: u64,
    pub __clang_max_align_nonce2: u128,
}
#[test]
fn bindgen_test_layout_max_align_t() {
    const UNINIT: ::std::mem::MaybeUninit<max_align_t> = ::std::mem::MaybeUninit::uninit();
    let ptr = UNINIT.as_ptr();
    assert_eq!(
        ::std::mem::size_of::<max_align_t>(),
        32usize,
        concat!("Size of: ", stringify!(max_align_t))
    );
    assert_eq!(
        ::std::mem::align_of::<max_align_t>(),
        16usize,
        concat!("Alignment of ", stringify!(max_align_t))
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).__clang_max_align_nonce1) as usize - ptr as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(max_align_t),
            "::",
            stringify!(__clang_max_align_nonce1)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).__clang_max_align_nonce2) as usize - ptr as usize },
        16usize,
        concat!(
            "Offset of field: ",
            stringify!(max_align_t),
            "::",
            stringify!(__clang_max_align_nonce2)
        )
    );
}
pub mod E_MODEL {
    pub type Type = ::std::os::raw::c_uint;
    pub const MODEL_ID_UNKNOWN: Type = 0;
    pub const MODEL_ID_MR274CU_BH: Type = 1;
    pub const MODEL_ID_MR16000MU: Type = 2;
    pub const MODEL_ID_MR282CC_BH: Type = 3;
    pub const MODEL_ID_MR274MU_BH: Type = 4;
    pub const MODEL_ID_MR456CU_BH: Type = 5;
    pub const MODEL_ID_MR252CC_BH: Type = 6;
    pub const MODEL_ID_MR4021MU_BH: Type = 7;
    pub const MODEL_ID_MR4022MU_BH: Type = 116;
    pub const MODEL_ID_MR655CU_BH: Type = 9;
    pub const MODEL_ID_MR11002M: Type = 10;
    pub const MODEL_ID_MR4021CU_BH: Type = 11;
    pub const MODEL_ID_MR655MU_BH: Type = 12;
    pub const MODEL_ID_MR282CU_BH: Type = 13;
    pub const MODEL_ID_MR252CU_BH: Type = 14;
    pub const MODEL_ID_MR285MU_BH: Type = 15;
    pub const MODEL_ID_MR285CU_BH: Type = 16;
    pub const MODEL_ID_MR285MC_BH: Type = 17;
    pub const MODEL_ID_MR285CC_BH: Type = 18;
    pub const MODEL_ID_MH160MC_KK_FA: Type = 112;
    pub const MODEL_ID_MU9PC_BH: Type = 20;
    pub const MODEL_ID_MR11002C: Type = 21;
    pub const MODEL_ID_MU9PM_MH: Type = 22;
    pub const MODEL_ID_MU9PC_MH: Type = 23;
    pub const MODEL_ID_MU9PM_BH: Type = 24;
    pub const MODEL_ID_GENTLXIAPI_REFERENCE: Type = 35;
    pub const MODEL_ID_MQ013CG_E2: Type = 49;
    pub const MODEL_ID_MQ013MG_E2: Type = 50;
    pub const MODEL_ID_MQ003CG_CM: Type = 51;
    pub const MODEL_ID_MQ003MG_CM: Type = 52;
    pub const MODEL_ID_MQ022CG_CM: Type = 53;
    pub const MODEL_ID_MQ022MG_CM: Type = 54;
    pub const MODEL_ID_MQ042CG_CM: Type = 55;
    pub const MODEL_ID_MQ042MG_CM: Type = 56;
    pub const MODEL_ID_MM282CU_BH: Type = 158;
    pub const MODEL_ID_MQ022MG_CM_SR2: Type = 58;
    pub const MODEL_ID_MQ042CG_CM_TG: Type = 59;
    pub const MODEL_ID_MQ042MG_CM_TG: Type = 60;
    pub const MODEL_ID_MQ_USB3LINK: Type = 61;
    pub const MODEL_ID_MU9PC_SLC5: Type = 62;
    pub const MODEL_ID_MQ022CG_CM_TS: Type = 66;
    pub const MODEL_ID_MQ022MG_CM_TS: Type = 67;
    pub const MODEL_ID_MQ042CG_CM_TS: Type = 68;
    pub const MODEL_ID_MQ042MG_CM_TS: Type = 69;
    pub const MODEL_ID_MQ013CG_ONV: Type = 70;
    pub const MODEL_ID_MQ013MG_ONV: Type = 71;
    pub const MODEL_ID_MQ013RG_E2: Type = 72;
    pub const MODEL_ID_MQ042RG_CM: Type = 73;
    pub const MODEL_ID_MR11002XC_ICW: Type = 75;
    pub const MODEL_ID_MQ020CG_E2: Type = 76;
    pub const MODEL_ID_MQ020MG_E2: Type = 77;
    pub const MODEL_ID_MQ022RG_CM: Type = 78;
    pub const MODEL_ID_MR285CC_DP: Type = 79;
    pub const MODEL_ID_MR285MC_DP: Type = 80;
    pub const MODEL_ID_MR252CU_BRD: Type = 81;
    pub const MODEL_ID_MH110MC_KK_FA: Type = 82;
    pub const MODEL_ID_MR282CU_BRD: Type = 83;
    pub const MODEL_ID_MR282CC_DP: Type = 84;
    pub const MODEL_ID_MR285MU_BH_IRE: Type = 85;
    pub const MODEL_ID_MR285MC_DP_IRE: Type = 86;
    pub const MODEL_ID_MH110XC_KK_FA: Type = 87;
    pub const MODEL_ID_MH160XC_KK_FA: Type = 88;
    pub const MODEL_ID_MR252CC_DP: Type = 90;
    pub const MODEL_ID_MR285MC_BH_IRE: Type = 91;
    pub const MODEL_ID_MR456CC_BH: Type = 92;
    pub const MODEL_ID_MR282CU_DP: Type = 93;
    pub const MODEL_ID_MQ022HG_IM_ST32_NIR: Type = 135;
    pub const MODEL_ID_MR282CC_BRD: Type = 96;
    pub const MODEL_ID_MR252CC_BRD: Type = 100;
    pub const MODEL_ID_MQ022HG_IM_SM4X4_VIS: Type = 136;
    pub const MODEL_ID_MR252CU_DP: Type = 101;
    pub const MODEL_ID_MR285MU_BRD: Type = 102;
    pub const MODEL_ID_MR285CU_BRD: Type = 103;
    pub const MODEL_ID_MR285MC_BRD: Type = 104;
    pub const MODEL_ID_MR285CC_BRD: Type = 105;
    pub const MODEL_ID_MR285CC_DP_IRE: Type = 106;
    pub const MODEL_ID_MR285CC_BH_IRE: Type = 107;
    pub const MODEL_ID_MR285CU_BH_IRE: Type = 108;
    pub const MODEL_ID_MX11002: Type = 109;
    pub const MODEL_ID_MH110CC_KK_FA: Type = 110;
    pub const MODEL_ID_MR16000CU: Type = 111;
    pub const MODEL_ID_MH160CC_KK_FA: Type = 113;
    pub const MODEL_ID_MR4022MC_VELETA: Type = 114;
    pub const MODEL_ID_MR4021MC_VELETA: Type = 115;
    pub const MODEL_ID_MU9JC_BH: Type = 117;
    pub const MODEL_ID_MU9JM_BH: Type = 118;
    pub const MODEL_ID_MQ022HG_IM_LS100_NIR: Type = 134;
    pub const MODEL_ID_CB120RG_CM_X8G3: Type = 174;
    pub const MODEL_ID_MD091CC_SY: Type = 122;
    pub const MODEL_ID_CB120MG_CM_X8G3: Type = 173;
    pub const MODEL_ID_MD028CU_SY: Type = 126;
    pub const MODEL_ID_MD061CU_SY: Type = 127;
    pub const MODEL_ID_MD091CU_SY: Type = 128;
    pub const MODEL_ID_MD028MU_SY: Type = 129;
    pub const MODEL_ID_MD061MU_SY: Type = 130;
    pub const MODEL_ID_MD091MU_SY: Type = 131;
    pub const MODEL_ID_CB200CG_CM: Type = 132;
    pub const MODEL_ID_CB200MG_CM: Type = 133;
    pub const MODEL_ID_CB120CG_CM_X8G3: Type = 172;
    pub const MODEL_ID_CB120RG_CM: Type = 171;
    pub const MODEL_ID_MD120CU_SY: Type = 139;
    pub const MODEL_ID_MD120MU_SY: Type = 140;
    pub const MODEL_ID_MQ022HG_IM_UN: Type = 141;
    pub const MODEL_ID_CAL_Simulator: Type = 142;
    pub const MODEL_ID_MT031CG_SY: Type = 164;
    pub const MODEL_ID_MQ022HG_IM_LS150_VISNIR: Type = 143;
    pub const MODEL_ID_MQ022HG_IM_SM5X5_NIR: Type = 144;
    pub const MODEL_ID_MQ022HG_IM_SM4X4_NIR: Type = 145;
    pub const MODEL_ID_MQ022MG_CM_BARE_BRD: Type = 146;
    pub const MODEL_ID_MQ042MG_CM_BARE_BRD: Type = 147;
    pub const MODEL_ID_MT023CG_SY: Type = 148;
    pub const MODEL_ID_MT023MG_SY: Type = 149;
    pub const MODEL_ID_MT200CG_CM: Type = 150;
    pub const MODEL_ID_MT200MG_CM: Type = 151;
    pub const MODEL_ID_CB120CG_CM: Type = 152;
    pub const MODEL_ID_CB120MG_CM: Type = 153;
    pub const MODEL_ID_MT003CG_LX: Type = 154;
    pub const MODEL_ID_MT003MG_LX: Type = 155;
    pub const MODEL_ID_MQ013CG_ON: Type = 156;
    pub const MODEL_ID_MQ013MG_ON: Type = 157;
    pub const MODEL_ID_MT050CG_SY: Type = 159;
    pub const MODEL_ID_MT050MG_SY: Type = 160;
    pub const MODEL_ID_MT120CG_CM: Type = 161;
    pub const MODEL_ID_MT031MG_SY: Type = 165;
    pub const MODEL_ID_MT120MG_CM: Type = 163;
    pub const MODEL_ID_MJ042IC_TS_UB: Type = 166;
    pub const MODEL_ID_MH110XC_KK_TP2_1: Type = 168;
    pub const MODEL_ID_MC023CG_SY: Type = 169;
    pub const MODEL_ID_MC023MG_SY: Type = 170;
    pub const MODEL_ID_MC023CG_SY_FLEX: Type = 205;
    pub const MODEL_ID_MX124CG_SY_X2G2: Type = 175;
    pub const MODEL_ID_MX124MG_SY_X2G2: Type = 176;
    pub const MODEL_ID_MX089CG_SY_X2G2: Type = 177;
    pub const MODEL_ID_MX089MG_SY_X2G2: Type = 178;
    pub const MODEL_ID_MC031CG_SY: Type = 179;
    pub const MODEL_ID_MC031MG_SY: Type = 180;
    pub const MODEL_ID_MC050CG_SY: Type = 181;
    pub const MODEL_ID_MC050MG_SY: Type = 182;
    pub const MODEL_ID_MC089CG_SY: Type = 183;
    pub const MODEL_ID_MC124CG_SY: Type = 186;
    pub const MODEL_ID_MC089MG_SY: Type = 185;
    pub const MODEL_ID_MC124MG_SY: Type = 187;
    pub const MODEL_ID_MX023CG_SY_X2G2: Type = 188;
    pub const MODEL_ID_MX023MG_SY_X2G2: Type = 189;
    pub const MODEL_ID_MX031CG_SY_X2G2: Type = 190;
    pub const MODEL_ID_MX031MG_SY_X2G2: Type = 191;
    pub const MODEL_ID_MX050CG_SY_X2G2: Type = 192;
    pub const MODEL_ID_MX050MG_SY_X2G2: Type = 193;
    pub const MODEL_ID_MX042CG_CM_X2G2: Type = 194;
    pub const MODEL_ID_MX042MG_CM_X2G2: Type = 195;
    pub const MODEL_ID_MX042RG_CM_X2G2: Type = 196;
    pub const MODEL_ID_CB500CG_CM: Type = 197;
    pub const MODEL_ID_CB500MG_CM: Type = 198;
    pub const MODEL_ID_CB042CG_GP: Type = 199;
    pub const MODEL_ID_CB042MG_GP: Type = 200;
    pub const MODEL_ID_CB013CG_LX_X8G3: Type = 201;
    pub const MODEL_ID_CB013MG_LX_X8G3: Type = 202;
    pub const MODEL_ID_MJ081MC_TS_TC: Type = 203;
    pub const MODEL_ID_MC023MG_SY_FLEX: Type = 206;
    pub const MODEL_ID_MC031CG_SY_FLEX: Type = 207;
    pub const MODEL_ID_MC031MG_SY_FLEX: Type = 208;
    pub const MODEL_ID_MC050CG_SY_FLEX: Type = 209;
    pub const MODEL_ID_MC050MG_SY_FLEX: Type = 210;
    pub const MODEL_ID_MC089CG_SY_FLEX: Type = 211;
    pub const MODEL_ID_MC089MG_SY_FLEX: Type = 212;
    pub const MODEL_ID_MC124CG_SY_FLEX: Type = 213;
    pub const MODEL_ID_MC124MG_SY_FLEX: Type = 214;
    pub const MODEL_ID_MQ013RG_ON: Type = 215;
    pub const MODEL_ID_MJ042MC_TS_TC: Type = 216;
    pub const MODEL_ID_MJ081XC_TS_TC: Type = 217;
    pub const MODEL_ID_MJ081XC_TS_TP1_1_25: Type = 218;
    pub const MODEL_ID_MJ150MR_GP: Type = 219;
    pub const MODEL_ID_MX200CG_CM_X4G2: Type = 220;
    pub const MODEL_ID_MX200MG_CM_X4G2: Type = 221;
    pub const MODEL_ID_MX120CG_CM_X4G2: Type = 222;
    pub const MODEL_ID_MX120MG_CM_X4G2: Type = 223;
    pub const MODEL_ID_MX120RG_CM_X4G2: Type = 224;
    pub const MODEL_ID_MJ160MU_TS_UB: Type = 225;
    pub const MODEL_ID_MJ160MC_TS_UB: Type = 226;
    pub const MODEL_ID_MQ022HG_IM_SM2X2_RGBNIR: Type = 227;
    pub const MODEL_ID_CB019CG_LX_X8G3: Type = 228;
    pub const MODEL_ID_CB019MG_LX_X8G3: Type = 229;
    pub const MODEL_ID_CB160CG_LX_X8G3: Type = 230;
    pub const MODEL_ID_CB160MG_LX_X8G3: Type = 231;
    pub const MODEL_ID_MJ160XC_TS_UB: Type = 232;
    pub const MODEL_ID_MX004MG_SY_X2G2: Type = 233;
    pub const MODEL_ID_MX004CG_SY_X2G2: Type = 234;
    pub const MODEL_ID_MX016MG_SY_X2G2: Type = 235;
    pub const MODEL_ID_MX016CG_SY_X2G2: Type = 236;
    pub const MODEL_ID_MJ290MC_TS_UB: Type = 237;
    pub const MODEL_ID_MJ150XR_GP_TP2_1_GO: Type = 258;
    pub const MODEL_ID_MJ042MU_TS_TC: Type = 252;
    pub const MODEL_ID_MX022CG_CM_X2G2: Type = 248;
    pub const MODEL_ID_MX022MG_CM_X2G2: Type = 249;
    pub const MODEL_ID_MX022RG_CM_X2G2: Type = 250;
    pub const MODEL_ID_MX019MM_PH_X2G2: Type = 251;
    pub const MODEL_ID_MX500CG_CM_X4G2: Type = 253;
    pub const MODEL_ID_MX500MG_CM_X4G2: Type = 256;
    pub const MODEL_ID_MU181CR_ON: Type = 257;
    pub const MODEL_ID_MQ022MG_CM_BRD: Type = 402;
    pub const MODEL_ID_MJ042MR_GP_P11: Type = 499;
    pub const MODEL_ID_MJ042MR_GP_P11_BSI: Type = 500;
    pub const MODEL_ID_MQ022MG_CM_SL_BRD: Type = 633;
    pub const MODEL_ID_MQ022MG_CM_FL_BRD: Type = 661;
    pub const MODEL_ID_MQ022MG_CM_FL: Type = 685;
    pub const MODEL_ID_MX377MR_GP_Fx_X4G3_MTP_W: Type = 701;
    pub const MODEL_ID_MX377MR_GP_Bx_X4G3_MTP_W: Type = 703;
    pub const MODEL_ID_CB262MG_GP_X8G3: Type = 706;
    pub const MODEL_ID_CB262CG_GP_X8G3: Type = 707;
    pub const MODEL_ID_MR655MU_BRD: Type = 1230;
    pub const MODEL_ID_MX610CR_SY_X4G3_FF: Type = 1210;
    pub const MODEL_ID_MQ022HG_IM_SM4X4_VIS3: Type = 1201;
    pub const MODEL_ID_MX1510MR_SY_X4G3_FF: Type = 1205;
    pub const MODEL_ID_MX1510CR_SY_X4G3_FF: Type = 1206;
    pub const MODEL_ID_MX1018MR_SY_X4G3_FF: Type = 1207;
    pub const MODEL_ID_MX1018CR_SY_X4G3_FF: Type = 1208;
    pub const MODEL_ID_MX610MR_SY_X4G3_FF: Type = 1209;
    pub const MODEL_ID_MX120CG_CM_X8G3_FF: Type = 1238;
    pub const MODEL_ID_CB042MG_GP_BSI: Type = 843;
    pub const MODEL_ID_CB042CG_GP_BSI: Type = 844;
    pub const MODEL_ID_CB500MG_CM_X8G3_ELD: Type = 855;
    pub const MODEL_ID_CB654CG_GP_X8G3: Type = 858;
    pub const MODEL_ID_CB654MG_GP_X8G3: Type = 859;
    pub const MODEL_ID_MC050YG_SY_UB: Type = 882;
    pub const MODEL_ID_MC050ZG_SY_UB: Type = 883;
    pub const MODEL_ID_MJ042MR_GP_P6: Type = 887;
    pub const MODEL_ID_MJ042MR_GP_P6_BSI: Type = 888;
    pub const MODEL_ID_MX377MR_GP_Fx_X4G3_MTP: Type = 900;
    pub const MODEL_ID_MX377MR_GP_Bx_X4G3_MTP: Type = 901;
    pub const MODEL_ID_MJ042MR_GP_P11_BSI_TVISB: Type = 902;
    pub const MODEL_ID_MJ042MR_GP_P11_BSI_UV: Type = 903;
    pub const MODEL_ID_MJ042MR_GP_P11_BSI_VIS: Type = 904;
    pub const MODEL_ID_CB120CG_CM_X8G3_R2: Type = 905;
    pub const MODEL_ID_CB120MG_CM_X8G3_R2: Type = 906;
    pub const MODEL_ID_CB120RG_CM_X8G3_R2: Type = 907;
    pub const MODEL_ID_CB013CG_LX_X8G3_R2: Type = 908;
    pub const MODEL_ID_CB013MG_LX_X8G3_R2: Type = 909;
    pub const MODEL_ID_CB019CG_LX_X8G3_R2: Type = 910;
    pub const MODEL_ID_CB019MG_LX_X8G3_R2: Type = 911;
    pub const MODEL_ID_CB160CG_LX_X8G3_R2: Type = 912;
    pub const MODEL_ID_CB160MG_LX_X8G3_R2: Type = 913;
    pub const MODEL_ID_MX1510MR_SY_X2G2_VXL: Type = 914;
    pub const MODEL_ID_MX1510CR_SY_X2G2_VXL: Type = 915;
    pub const MODEL_ID_MQ022HG_IM_SM4X4_REDNIR: Type = 919;
    pub const MODEL_ID_MX200MG_CM_X4G2_TG_FL_EMS: Type = 920;
    pub const MODEL_ID_MH160XC_KK_TP2_1: Type = 922;
    pub const MODEL_ID_MU181CR_ON_R3: Type = 923;
    pub const MODEL_ID_MX042MR_GP_X4G2_ARX: Type = 928;
    pub const MODEL_ID_MX161CG_SY_X2G2: Type = 941;
    pub const MODEL_ID_MX161MG_SY_X2G2: Type = 944;
    pub const MODEL_ID_MX203CG_SY_X2G2: Type = 960;
    pub const MODEL_ID_MX203MG_SY_X2G2: Type = 963;
    pub const MODEL_ID_MX245CG_SY_X2G2: Type = 970;
    pub const MODEL_ID_MX245MG_SY_X2G2: Type = 973;
    pub const MODEL_ID_MX019MM_PH_X2G2_FV_FR: Type = 1004;
    pub const MODEL_ID_MJ150CR_GP: Type = 993;
    pub const MODEL_ID_MJ150XR_GP_FA_GO: Type = 996;
    pub const MODEL_ID_MQ022HG_IM_LS100_NIR2: Type = 1005;
    pub const MODEL_ID_MQ022HG_IM_LS150_VN2: Type = 1006;
    pub const MODEL_ID_MQ022HG_IM_SM4X4_VIS2: Type = 1007;
    pub const MODEL_ID_MQ022HG_IM_SM4X4_RN2: Type = 1008;
    pub const MODEL_ID_MQ022HG_IM_SM5X5_NIR2: Type = 1009;
    pub const MODEL_ID_MX022HG_IM_LS100_NIR2_FL: Type = 1010;
    pub const MODEL_ID_MX022HG_IM_LS150_VN2_FL: Type = 1011;
    pub const MODEL_ID_MX022HG_IM_SM4X4_VIS2_FL: Type = 1012;
    pub const MODEL_ID_MX022HG_IM_SM4X4_RN2_FL: Type = 1013;
    pub const MODEL_ID_MX022HG_IM_SM5X5_NIR2_FL: Type = 1014;
    pub const MODEL_ID_MX022HG_IM_LS100_NIR2_FV: Type = 1015;
    pub const MODEL_ID_MX022HG_IM_LS150_VN2_FV: Type = 1016;
    pub const MODEL_ID_MX022HG_IM_SM4X4_VIS2_FV: Type = 1017;
    pub const MODEL_ID_MX022HG_IM_SM4X4_RN2_FV: Type = 1018;
    pub const MODEL_ID_MX022HG_IM_SM5X5_NIR2_FV: Type = 1019;
    pub const MODEL_ID_MX022HG_IM_LS100_NIR2_FF: Type = 1020;
    pub const MODEL_ID_MX022HG_IM_LS150_VN2_FF: Type = 1021;
    pub const MODEL_ID_MX022HG_IM_SM4X4_VIS2_FF: Type = 1022;
    pub const MODEL_ID_MX022HG_IM_SM4X4_RN2_FF: Type = 1023;
    pub const MODEL_ID_MX022HG_IM_SM5X5_NIR2_FF: Type = 1024;
    pub const MODEL_ID_MX022MG_CM_BARE_FL_IM: Type = 1025;
    pub const MODEL_ID_MX022MG_CM_BARE_FL_BRD: Type = 1026;
    pub const MODEL_ID_MQ022HG_IM_LS100_NIR2_FL: Type = 1027;
    pub const MODEL_ID_MQ022HG_IM_LS150_VN2_FL: Type = 1028;
    pub const MODEL_ID_MQ022HG_IM_SM4X4_VIS2_FL: Type = 1029;
    pub const MODEL_ID_MQ022HG_IM_SM4X4_RN2_FL: Type = 1030;
    pub const MODEL_ID_MQ022HG_IM_SM5X5_NIR2_FL: Type = 1031;
    pub const MODEL_ID_MQ022MG_CM_BARE_IM: Type = 1032;
    pub const MODEL_ID_MQ022MG_CM_BARE_FL_IM: Type = 1033;
    pub const MODEL_ID_MQ022MG_CM_BARE_FL_BRD: Type = 1034;
    pub const MODEL_ID_MX262CG_GP_X4G2_FF: Type = 1042;
    pub const MODEL_ID_MX262MG_GP_X4G2_FF: Type = 1041;
    pub const MODEL_ID_MX262RG_GP_X4G2_FF: Type = 1040;
    pub const MODEL_ID_MX610CR_SY_X2G2_VXL: Type = 1043;
    pub const MODEL_ID_MX610MR_SY_X2G2_VXL: Type = 1044;
    pub const MODEL_ID_MX510XG_GP_FA_GO: Type = 1050;
    pub const MODEL_ID_MC161CG_SY_FLEX: Type = 1081;
    pub const MODEL_ID_MC161MG_SY_FLEX: Type = 1082;
    pub const MODEL_ID_MC161CG_SY: Type = 1083;
    pub const MODEL_ID_MC161MG_SY: Type = 1084;
    pub const MODEL_ID_MC203CG_SY: Type = 1095;
    pub const MODEL_ID_MC203CG_SY_FLEX: Type = 1097;
    pub const MODEL_ID_MC203MG_SY: Type = 1100;
    pub const MODEL_ID_MC203MG_SY_FLEX: Type = 1102;
    pub const MODEL_ID_MC245CG_SY: Type = 1105;
    pub const MODEL_ID_MC245CG_SY_FLEX: Type = 1107;
    pub const MODEL_ID_MC245MG_SY: Type = 1110;
    pub const MODEL_ID_MC245MG_SY_FLEX: Type = 1112;
    pub const MODEL_ID_MX510XG_GP_TP2_1_GO: Type = 1119;
    pub const MODEL_ID_MX161CG_SY_X2G2_HDR: Type = 1133;
    pub const MODEL_ID_MX161MG_SY_X2G2_HDR: Type = 1137;
    pub const MODEL_ID_MX203CG_SY_X2G2_HDR: Type = 1141;
    pub const MODEL_ID_MX203MG_SY_X2G2_HDR: Type = 1145;
    pub const MODEL_ID_MX245CG_SY_X2G2_HDR: Type = 1149;
    pub const MODEL_ID_MX245MG_SY_X2G2_HDR: Type = 1153;
    pub const MODEL_ID_MC161CG_SY_HDR: Type = 1157;
    pub const MODEL_ID_MC161CG_SY_FLEX_HDR: Type = 1159;
    pub const MODEL_ID_MC161MG_SY_HDR: Type = 1162;
    pub const MODEL_ID_MC161MG_SY_FLEX_HDR: Type = 1164;
    pub const MODEL_ID_MC203CG_SY_HDR: Type = 1167;
    pub const MODEL_ID_MC203CG_SY_FLEX_HDR: Type = 1169;
    pub const MODEL_ID_MC203MG_SY_HDR: Type = 1172;
    pub const MODEL_ID_MC203MG_SY_FLEX_HDR: Type = 1174;
    pub const MODEL_ID_MC245CG_SY_HDR: Type = 1177;
    pub const MODEL_ID_MC245CG_SY_FLEX_HDR: Type = 1179;
    pub const MODEL_ID_MC245MG_SY_HDR: Type = 1182;
    pub const MODEL_ID_MC245MG_SY_FLEX_HDR: Type = 1184;
    pub const MODEL_ID_MX120MG_CM_X8G3_FF: Type = 1239;
    pub const MODEL_ID_MJ150XR_GP_TP2_6_1_GO: Type = 1251;
    pub const MODEL_ID_MX245MG_SY_X4G3_FF: Type = 1281;
    pub const MODEL_ID_MX245CG_SY_X4G3_FF: Type = 1282;
    pub const MODEL_ID_MX203MG_SY_X4G3_FF: Type = 1283;
    pub const MODEL_ID_MX203CG_SY_X4G3_FF: Type = 1284;
    pub const MODEL_ID_MX161MG_SY_X4G3_FF: Type = 1285;
    pub const MODEL_ID_MX161CG_SY_X4G3_FF: Type = 1286;
    pub const MODEL_ID_MU181CR_ON_CZM: Type = 1288;
    pub const MODEL_ID_MU181CR_ON_CZM_R3: Type = 1289;
    pub const MODEL_ID_MX510XG_GP_FA_CSI: Type = 1290;
    pub const MODEL_ID_MX510MG_GP: Type = 1291;
    pub const MODEL_ID_MX124CG_SY_LT_X2G2: Type = 1320;
    pub const MODEL_ID_MX124MG_SY_LT_X2G2: Type = 1324;
    pub const MODEL_ID_MC031MG_SY_FL_PHO: Type = 1335;
    pub const MODEL_ID_CB023MR_GP_X8G3: Type = 1344;
    pub const MODEL_ID_MX031MG_SY_X2G2_CS_PHO: Type = 1351;
    pub const MODEL_ID_MJ042MR_GP_P11_BSI_NEO: Type = 1353;
    pub const MODEL_ID_MX610XR_SY_X4G3_FA_CSI: Type = 1362;
    pub const MODEL_ID_MX610XR_SY_X4G3_FA_GO: Type = 1363;
    pub const MODEL_ID_MX610XR_SY_X4G3_TP2_1_CSI: Type = 1364;
    pub const MODEL_ID_MX610XR_SY_X4G3_TP2_1_GO: Type = 1365;
    pub const MODEL_ID_MX262RG_GP_X8G3_MTP_LA: Type = 1366;
    pub const MODEL_ID_MX081UG_SY_X2G2_HDR: Type = 1373;
    pub const MODEL_ID_MJ042MR_GP_P6_BSI_XPL: Type = 1374;
    pub const MODEL_ID_MX071CG_SY_X2G2: Type = 1378;
    pub const MODEL_ID_MX071MG_SY_X2G2: Type = 1384;
    pub const MODEL_ID_MX028CG_SY_X2G2: Type = 1407;
    pub const MODEL_ID_MX028MG_SY_X2G2: Type = 1411;
    pub const MODEL_ID_MX017CG_SY_X2G2: Type = 1415;
    pub const MODEL_ID_MX017MG_SY_X2G2: Type = 1419;
    pub const MODEL_ID_MX005CG_SY_X2G2: Type = 1423;
    pub const MODEL_ID_MX005MG_SY_X2G2: Type = 1427;
}
pub type XI_RETURN = ::std::os::raw::c_int;
pub mod XI_RET {
    pub type Type = ::std::os::raw::c_uint;
    pub const XI_OK: Type = 0;
    pub const XI_INVALID_HANDLE: Type = 1;
    pub const XI_READREG: Type = 2;
    pub const XI_WRITEREG: Type = 3;
    pub const XI_FREE_RESOURCES: Type = 4;
    pub const XI_FREE_CHANNEL: Type = 5;
    pub const XI_FREE_BANDWIDTH: Type = 6;
    pub const XI_READBLK: Type = 7;
    pub const XI_WRITEBLK: Type = 8;
    pub const XI_NO_IMAGE: Type = 9;
    pub const XI_TIMEOUT: Type = 10;
    pub const XI_INVALID_ARG: Type = 11;
    pub const XI_NOT_SUPPORTED: Type = 12;
    pub const XI_ISOCH_ATTACH_BUFFERS: Type = 13;
    pub const XI_GET_OVERLAPPED_RESULT: Type = 14;
    pub const XI_MEMORY_ALLOCATION: Type = 15;
    pub const XI_DLLCONTEXTISNULL: Type = 16;
    pub const XI_DLLCONTEXTISNONZERO: Type = 17;
    pub const XI_DLLCONTEXTEXIST: Type = 18;
    pub const XI_TOOMANYDEVICES: Type = 19;
    pub const XI_ERRORCAMCONTEXT: Type = 20;
    pub const XI_UNKNOWN_HARDWARE: Type = 21;
    pub const XI_INVALID_TM_FILE: Type = 22;
    pub const XI_INVALID_TM_TAG: Type = 23;
    pub const XI_INCOMPLETE_TM: Type = 24;
    pub const XI_BUS_RESET_FAILED: Type = 25;
    pub const XI_NOT_IMPLEMENTED: Type = 26;
    pub const XI_SHADING_TOOBRIGHT: Type = 27;
    pub const XI_SHADING_TOODARK: Type = 28;
    pub const XI_TOO_LOW_GAIN: Type = 29;
    pub const XI_INVALID_BPL: Type = 30;
    pub const XI_BPL_REALLOC: Type = 31;
    pub const XI_INVALID_PIXEL_LIST: Type = 32;
    pub const XI_INVALID_FFS: Type = 33;
    pub const XI_INVALID_PROFILE: Type = 34;
    pub const XI_INVALID_CALIBRATION: Type = 35;
    pub const XI_INVALID_BUFFER: Type = 36;
    pub const XI_INVALID_DATA: Type = 38;
    pub const XI_TGBUSY: Type = 39;
    pub const XI_IO_WRONG: Type = 40;
    pub const XI_ACQUISITION_ALREADY_UP: Type = 41;
    pub const XI_OLD_DRIVER_VERSION: Type = 42;
    pub const XI_GET_LAST_ERROR: Type = 43;
    pub const XI_CANT_PROCESS: Type = 44;
    pub const XI_ACQUISITION_STOPED: Type = 45;
    pub const XI_ACQUISITION_STOPED_WERR: Type = 46;
    pub const XI_INVALID_INPUT_ICC_PROFILE: Type = 47;
    pub const XI_INVALID_OUTPUT_ICC_PROFILE: Type = 48;
    pub const XI_DEVICE_NOT_READY: Type = 49;
    pub const XI_SHADING_TOOCONTRAST: Type = 50;
    pub const XI_ALREADY_INITIALIZED: Type = 51;
    pub const XI_NOT_ENOUGH_PRIVILEGES: Type = 52;
    pub const XI_NOT_COMPATIBLE_DRIVER: Type = 53;
    pub const XI_TM_INVALID_RESOURCE: Type = 54;
    pub const XI_DEVICE_HAS_BEEN_RESETED: Type = 55;
    pub const XI_NO_DEVICES_FOUND: Type = 56;
    pub const XI_RESOURCE_OR_FUNCTION_LOCKED: Type = 57;
    pub const XI_BUFFER_SIZE_TOO_SMALL: Type = 58;
    pub const XI_COULDNT_INIT_PROCESSOR: Type = 59;
    pub const XI_NOT_INITIALIZED: Type = 60;
    pub const XI_RESOURCE_NOT_FOUND: Type = 61;
    pub const XI_UNKNOWN_PARAM: Type = 100;
    pub const XI_WRONG_PARAM_VALUE: Type = 101;
    pub const XI_WRONG_PARAM_TYPE: Type = 103;
    pub const XI_WRONG_PARAM_SIZE: Type = 104;
    pub const XI_BUFFER_TOO_SMALL: Type = 105;
    pub const XI_NOT_SUPPORTED_PARAM: Type = 106;
    pub const XI_NOT_SUPPORTED_PARAM_INFO: Type = 107;
    pub const XI_NOT_SUPPORTED_DATA_FORMAT: Type = 108;
    pub const XI_READ_ONLY_PARAM: Type = 109;
    pub const XI_BANDWIDTH_NOT_SUPPORTED: Type = 111;
    pub const XI_INVALID_FFS_FILE_NAME: Type = 112;
    pub const XI_FFS_FILE_NOT_FOUND: Type = 113;
    pub const XI_PARAM_NOT_SETTABLE: Type = 114;
    pub const XI_SAFE_POLICY_NOT_SUPPORTED: Type = 115;
    pub const XI_GPUDIRECT_NOT_AVAILABLE: Type = 116;
    pub const XI_INCORRECT_SENS_ID_CHECK: Type = 117;
    pub const XI_INCORRECT_FPGA_TYPE: Type = 118;
    pub const XI_PARAM_CONDITIONALLY_NOT_AVAILABLE: Type = 119;
    pub const XI_ERR_FRAME_BUFFER_RAM_INIT: Type = 120;
    pub const XI_PROC_OTHER_ERROR: Type = 201;
    pub const XI_PROC_PROCESSING_ERROR: Type = 202;
    pub const XI_PROC_INPUT_FORMAT_UNSUPPORTED: Type = 203;
    pub const XI_PROC_OUTPUT_FORMAT_UNSUPPORTED: Type = 204;
    pub const XI_OUT_OF_RANGE: Type = 205;
}
pub mod XI_DOWNSAMPLING_VALUE {
    pub type Type = ::std::os::raw::c_uint;
    pub const XI_DWN_1x1: Type = 1;
    pub const XI_DWN_2x2: Type = 2;
    pub const XI_DWN_3x3: Type = 3;
    pub const XI_DWN_4x4: Type = 4;
    pub const XI_DWN_5x5: Type = 5;
    pub const XI_DWN_6x6: Type = 6;
    pub const XI_DWN_7x7: Type = 7;
    pub const XI_DWN_8x8: Type = 8;
    pub const XI_DWN_9x9: Type = 9;
    pub const XI_DWN_10x10: Type = 10;
    pub const XI_DWN_16x16: Type = 16;
}
pub mod XI_TEST_PATTERN_GENERATOR {
    pub type Type = ::std::os::raw::c_uint;
    pub const XI_TESTPAT_GEN_SENSOR: Type = 0;
    pub const XI_TESTPAT_GEN_FPGA: Type = 1;
}
pub mod XI_VERSION {
    pub type Type = ::std::os::raw::c_uint;
    pub const XI_VER_API: Type = 0;
    pub const XI_VER_DRV: Type = 1;
    pub const XI_VER_MCU1: Type = 2;
    pub const XI_VER_MCU2: Type = 3;
    pub const XI_VER_MCU3: Type = 4;
    pub const XI_VER_FPGA1: Type = 5;
    pub const XI_VER_XMLMAN: Type = 6;
    pub const XI_VER_HW_REV: Type = 7;
    pub const XI_VER_FACTORY_SET: Type = 8;
}
pub mod XI_TEST_PATTERN {
    pub type Type = ::std::os::raw::c_uint;
    pub const XI_TESTPAT_OFF: Type = 0;
    pub const XI_TESTPAT_BLACK: Type = 1;
    pub const XI_TESTPAT_WHITE: Type = 2;
    pub const XI_TESTPAT_GREY_HORIZ_RAMP: Type = 3;
    pub const XI_TESTPAT_GREY_VERT_RAMP: Type = 4;
    pub const XI_TESTPAT_GREY_HORIZ_RAMP_MOVING: Type = 5;
    pub const XI_TESTPAT_GREY_VERT_RAMP_MOVING: Type = 6;
    pub const XI_TESTPAT_HORIZ_LINE_MOVING: Type = 7;
    pub const XI_TESTPAT_VERT_LINE_MOVING: Type = 8;
    pub const XI_TESTPAT_COLOR_BAR: Type = 9;
    pub const XI_TESTPAT_FRAME_COUNTER: Type = 10;
    pub const XI_TESTPAT_DEVICE_SPEC_COUNTER: Type = 11;
}
pub mod XI_DEC_PATTERN {
    pub type Type = ::std::os::raw::c_uint;
    pub const XI_DEC_MONO: Type = 1;
    pub const XI_DEC_BAYER: Type = 2;
}
pub mod XI_BIN_PATTERN {
    pub type Type = ::std::os::raw::c_uint;
    pub const XI_BIN_MONO: Type = 1;
    pub const XI_BIN_BAYER: Type = 2;
}
pub mod XI_BIN_SELECTOR {
    pub type Type = ::std::os::raw::c_uint;
    pub const XI_BIN_SELECT_SENSOR: Type = 0;
    pub const XI_BIN_SELECT_DEVICE_FPGA: Type = 1;
    pub const XI_BIN_SELECT_HOST_CPU: Type = 2;
}
pub mod XI_BIN_MODE {
    pub type Type = ::std::os::raw::c_uint;
    pub const XI_BIN_MODE_SUM: Type = 0;
    pub const XI_BIN_MODE_AVERAGE: Type = 1;
}
pub mod XI_DEC_SELECTOR {
    pub type Type = ::std::os::raw::c_uint;
    pub const XI_DEC_SELECT_SENSOR: Type = 0;
    pub const XI_DEC_SELECT_DEVICE_FPGA: Type = 1;
    pub const XI_DEC_SELECT_HOST_CPU: Type = 2;
}
pub mod XI_SENSOR_TAP_CNT {
    pub type Type = ::std::os::raw::c_uint;
    pub const XI_TAP_CNT_1: Type = 1;
    pub const XI_TAP_CNT_2: Type = 2;
    pub const XI_TAP_CNT_4: Type = 4;
}
pub mod XI_BIT_DEPTH {
    pub type Type = ::std::os::raw::c_uint;
    pub const XI_BPP_8: Type = 8;
    pub const XI_BPP_9: Type = 9;
    pub const XI_BPP_10: Type = 10;
    pub const XI_BPP_11: Type = 11;
    pub const XI_BPP_12: Type = 12;
    pub const XI_BPP_14: Type = 14;
    pub const XI_BPP_16: Type = 16;
    pub const XI_BPP_24: Type = 24;
    pub const XI_BPP_32: Type = 32;
}
pub mod XI_DEBUG_LEVEL {
    pub type Type = ::std::os::raw::c_uint;
    pub const XI_DL_DETAIL: Type = 0;
    pub const XI_DL_TRACE: Type = 1;
    pub const XI_DL_WARNING: Type = 2;
    pub const XI_DL_ERROR: Type = 3;
    pub const XI_DL_FATAL: Type = 4;
    pub const XI_DL_DISABLED: Type = 100;
}
pub mod XI_IMG_FORMAT {
    pub type Type = ::std::os::raw::c_uint;
    pub const XI_MONO8: Type = 0;
    pub const XI_MONO16: Type = 1;
    pub const XI_RGB24: Type = 2;
    pub const XI_RGB32: Type = 3;
    pub const XI_RGB_PLANAR: Type = 4;
    pub const XI_RAW8: Type = 5;
    pub const XI_RAW16: Type = 6;
    pub const XI_FRM_TRANSPORT_DATA: Type = 7;
    pub const XI_RGB48: Type = 8;
    pub const XI_RGB64: Type = 9;
    pub const XI_RGB16_PLANAR: Type = 10;
    pub const XI_RAW8X2: Type = 11;
    pub const XI_RAW8X4: Type = 12;
    pub const XI_RAW16X2: Type = 13;
    pub const XI_RAW16X4: Type = 14;
    pub const XI_RAW32: Type = 15;
    pub const XI_RAW32FLOAT: Type = 16;
}
pub mod XI_COLOR_FILTER_ARRAY {
    pub type Type = ::std::os::raw::c_uint;
    pub const XI_CFA_NONE: Type = 0;
    pub const XI_CFA_BAYER_RGGB: Type = 1;
    pub const XI_CFA_CMYG: Type = 2;
    pub const XI_CFA_RGR: Type = 3;
    pub const XI_CFA_BAYER_BGGR: Type = 4;
    pub const XI_CFA_BAYER_GRBG: Type = 5;
    pub const XI_CFA_BAYER_GBRG: Type = 6;
    pub const XI_CFA_POLAR_A_BAYER_BGGR: Type = 7;
    pub const XI_CFA_POLAR_A: Type = 8;
}
pub mod XI_BP {
    pub type Type = ::std::os::raw::c_uint;
    pub const XI_BP_UNSAFE: Type = 0;
    pub const XI_BP_SAFE: Type = 1;
}
pub mod XI_TRG_SOURCE {
    pub type Type = ::std::os::raw::c_uint;
    pub const XI_TRG_OFF: Type = 0;
    pub const XI_TRG_EDGE_RISING: Type = 1;
    pub const XI_TRG_EDGE_FALLING: Type = 2;
    pub const XI_TRG_SOFTWARE: Type = 3;
    pub const XI_TRG_LEVEL_HIGH: Type = 4;
    pub const XI_TRG_LEVEL_LOW: Type = 5;
}
pub mod XI_TRG_SELECTOR {
    pub type Type = ::std::os::raw::c_uint;
    pub const XI_TRG_SEL_FRAME_START: Type = 0;
    pub const XI_TRG_SEL_EXPOSURE_ACTIVE: Type = 1;
    pub const XI_TRG_SEL_FRAME_BURST_START: Type = 2;
    pub const XI_TRG_SEL_FRAME_BURST_ACTIVE: Type = 3;
    pub const XI_TRG_SEL_MULTIPLE_EXPOSURES: Type = 4;
    pub const XI_TRG_SEL_EXPOSURE_START: Type = 5;
    pub const XI_TRG_SEL_MULTI_SLOPE_PHASE_CHANGE: Type = 6;
    pub const XI_TRG_SEL_ACQUISITION_START: Type = 7;
}
pub mod XI_TRG_OVERLAP {
    pub type Type = ::std::os::raw::c_uint;
    pub const XI_TRG_OVERLAP_OFF: Type = 0;
    pub const XI_TRG_OVERLAP_READ_OUT: Type = 1;
    pub const XI_TRG_OVERLAP_PREV_FRAME: Type = 2;
}
pub mod XI_ACQ_TIMING_MODE {
    pub type Type = ::std::os::raw::c_uint;
    pub const XI_ACQ_TIMING_MODE_FREE_RUN: Type = 0;
    pub const XI_ACQ_TIMING_MODE_FRAME_RATE: Type = 1;
    pub const XI_ACQ_TIMING_MODE_FRAME_RATE_LIMIT: Type = 2;
}
pub mod XI_TRANSPORT_DATA_TARGET_MODE {
    pub type Type = ::std::os::raw::c_uint;
    pub const XI_TRANSPORT_DATA_TARGET_CPU_RAM: Type = 0;
    pub const XI_TRANSPORT_DATA_TARGET_GPU_RAM: Type = 1;
    pub const XI_TRANSPORT_DATA_TARGET_UNIFIED: Type = 2;
    pub const XI_TRANSPORT_DATA_TARGET_ZEROCOPY: Type = 3;
}
pub mod XI_GPI_SEL_CB {
    pub type Type = ::std::os::raw::c_uint;
    pub const XI_GPI_SEL_CB_IN1: Type = 1;
    pub const XI_GPI_SEL_CB_IN2: Type = 2;
    pub const XI_GPI_SEL_CB_INOUT1: Type = 3;
    pub const XI_GPI_SEL_CB_INOUT2: Type = 4;
    pub const XI_GPI_SEL_CB_INOUT3: Type = 5;
    pub const XI_GPI_SEL_CB_INOUT4: Type = 6;
}
pub mod XI_GPO_SEL_CB {
    pub type Type = ::std::os::raw::c_uint;
    pub const XI_GPO_SEL_CB_OUT1: Type = 1;
    pub const XI_GPO_SEL_CB_OUT2: Type = 2;
    pub const XI_GPO_SEL_CB_INOUT1: Type = 3;
    pub const XI_GPO_SEL_CB_INOUT2: Type = 4;
    pub const XI_GPO_SEL_CB_INOUT3: Type = 5;
    pub const XI_GPO_SEL_CB_INOUT4: Type = 6;
}
pub mod XI_GPI_MODE {
    pub type Type = ::std::os::raw::c_uint;
    pub const XI_GPI_OFF: Type = 0;
    pub const XI_GPI_TRIGGER: Type = 1;
    pub const XI_GPI_EXT_EVENT: Type = 2;
}
pub mod XI_GPI_SELECTOR {
    pub type Type = ::std::os::raw::c_uint;
    pub const XI_GPI_PORT1: Type = 1;
    pub const XI_GPI_PORT2: Type = 2;
    pub const XI_GPI_PORT3: Type = 3;
    pub const XI_GPI_PORT4: Type = 4;
    pub const XI_GPI_PORT5: Type = 5;
    pub const XI_GPI_PORT6: Type = 6;
    pub const XI_GPI_PORT7: Type = 7;
    pub const XI_GPI_PORT8: Type = 8;
    pub const XI_GPI_PORT9: Type = 9;
    pub const XI_GPI_PORT10: Type = 10;
    pub const XI_GPI_PORT11: Type = 11;
    pub const XI_GPI_PORT12: Type = 12;
}
pub mod XI_GPO_MODE {
    pub type Type = ::std::os::raw::c_uint;
    pub const XI_GPO_OFF: Type = 0;
    pub const XI_GPO_ON: Type = 1;
    pub const XI_GPO_FRAME_ACTIVE: Type = 2;
    pub const XI_GPO_FRAME_ACTIVE_NEG: Type = 3;
    pub const XI_GPO_EXPOSURE_ACTIVE: Type = 4;
    pub const XI_GPO_EXPOSURE_ACTIVE_NEG: Type = 5;
    pub const XI_GPO_FRAME_TRIGGER_WAIT: Type = 6;
    pub const XI_GPO_FRAME_TRIGGER_WAIT_NEG: Type = 7;
    pub const XI_GPO_EXPOSURE_PULSE: Type = 8;
    pub const XI_GPO_EXPOSURE_PULSE_NEG: Type = 9;
    pub const XI_GPO_BUSY: Type = 10;
    pub const XI_GPO_BUSY_NEG: Type = 11;
    pub const XI_GPO_HIGH_IMPEDANCE: Type = 12;
    pub const XI_GPO_FRAME_BUFFER_OVERFLOW: Type = 13;
    pub const XI_GPO_EXPOSURE_ACTIVE_FIRST_ROW: Type = 14;
    pub const XI_GPO_EXPOSURE_ACTIVE_FIRST_ROW_NEG: Type = 15;
    pub const XI_GPO_EXPOSURE_ACTIVE_ALL_ROWS: Type = 16;
    pub const XI_GPO_EXPOSURE_ACTIVE_ALL_ROWS_NEG: Type = 17;
    pub const XI_GPO_TXD: Type = 18;
}
pub mod XI_GPO_SELECTOR {
    pub type Type = ::std::os::raw::c_uint;
    pub const XI_GPO_PORT1: Type = 1;
    pub const XI_GPO_PORT2: Type = 2;
    pub const XI_GPO_PORT3: Type = 3;
    pub const XI_GPO_PORT4: Type = 4;
    pub const XI_GPO_PORT5: Type = 5;
    pub const XI_GPO_PORT6: Type = 6;
    pub const XI_GPO_PORT7: Type = 7;
    pub const XI_GPO_PORT8: Type = 8;
    pub const XI_GPO_PORT9: Type = 9;
    pub const XI_GPO_PORT10: Type = 10;
    pub const XI_GPO_PORT11: Type = 11;
    pub const XI_GPO_PORT12: Type = 12;
}
pub mod XI_LED_MODE {
    pub type Type = ::std::os::raw::c_uint;
    pub const XI_LED_HEARTBEAT: Type = 0;
    pub const XI_LED_TRIGGER_ACTIVE: Type = 1;
    pub const XI_LED_EXT_EVENT_ACTIVE: Type = 2;
    pub const XI_LED_LINK: Type = 3;
    pub const XI_LED_ACQUISITION: Type = 4;
    pub const XI_LED_EXPOSURE_ACTIVE: Type = 5;
    pub const XI_LED_FRAME_ACTIVE: Type = 6;
    pub const XI_LED_OFF: Type = 7;
    pub const XI_LED_ON: Type = 8;
    pub const XI_LED_BLINK: Type = 9;
}
pub mod XI_LED_SELECTOR {
    pub type Type = ::std::os::raw::c_uint;
    pub const XI_LED_SEL1: Type = 1;
    pub const XI_LED_SEL2: Type = 2;
    pub const XI_LED_SEL3: Type = 3;
    pub const XI_LED_SEL4: Type = 4;
    pub const XI_LED_SEL5: Type = 5;
}
pub mod XI_COUNTER_SELECTOR {
    pub type Type = ::std::os::raw::c_uint;
    pub const XI_CNT_SEL_TRANSPORT_SKIPPED_FRAMES: Type = 0;
    pub const XI_CNT_SEL_API_SKIPPED_FRAMES: Type = 1;
    pub const XI_CNT_SEL_TRANSPORT_TRANSFERRED_FRAMES: Type = 2;
    pub const XI_CNT_SEL_FRAME_MISSED_TRIGGER_DUETO_OVERLAP: Type = 3;
    pub const XI_CNT_SEL_FRAME_MISSED_TRIGGER_DUETO_FRAME_BUFFER_OVR: Type = 4;
    pub const XI_CNT_SEL_FRAME_BUFFER_OVERFLOW: Type = 5;
}
pub mod XI_TS_RST_MODE {
    pub type Type = ::std::os::raw::c_uint;
    pub const XI_TS_RST_ARM_ONCE: Type = 0;
    pub const XI_TS_RST_ARM_PERSIST: Type = 1;
}
pub mod XI_TS_RST_SOURCE {
    pub type Type = ::std::os::raw::c_uint;
    pub const XI_TS_RST_OFF: Type = 0;
    pub const XI_TS_RST_SRC_GPI_1: Type = 1;
    pub const XI_TS_RST_SRC_GPI_2: Type = 2;
    pub const XI_TS_RST_SRC_GPI_3: Type = 3;
    pub const XI_TS_RST_SRC_GPI_4: Type = 4;
    pub const XI_TS_RST_SRC_GPI_1_INV: Type = 5;
    pub const XI_TS_RST_SRC_GPI_2_INV: Type = 6;
    pub const XI_TS_RST_SRC_GPI_3_INV: Type = 7;
    pub const XI_TS_RST_SRC_GPI_4_INV: Type = 8;
    pub const XI_TS_RST_SRC_GPO_1: Type = 9;
    pub const XI_TS_RST_SRC_GPO_2: Type = 10;
    pub const XI_TS_RST_SRC_GPO_3: Type = 11;
    pub const XI_TS_RST_SRC_GPO_4: Type = 12;
    pub const XI_TS_RST_SRC_GPO_1_INV: Type = 13;
    pub const XI_TS_RST_SRC_GPO_2_INV: Type = 14;
    pub const XI_TS_RST_SRC_GPO_3_INV: Type = 15;
    pub const XI_TS_RST_SRC_GPO_4_INV: Type = 16;
    pub const XI_TS_RST_SRC_TRIGGER: Type = 17;
    pub const XI_TS_RST_SRC_TRIGGER_INV: Type = 18;
    pub const XI_TS_RST_SRC_SW: Type = 19;
    pub const XI_TS_RST_SRC_EXPACTIVE: Type = 20;
    pub const XI_TS_RST_SRC_EXPACTIVE_INV: Type = 21;
    pub const XI_TS_RST_SRC_FVAL: Type = 22;
    pub const XI_TS_RST_SRC_FVAL_INV: Type = 23;
    pub const XI_TS_RST_SRC_GPI_5: Type = 24;
    pub const XI_TS_RST_SRC_GPI_6: Type = 25;
    pub const XI_TS_RST_SRC_GPI_5_INV: Type = 26;
    pub const XI_TS_RST_SRC_GPI_6_INV: Type = 27;
    pub const XI_TS_RST_SRC_GPI_7: Type = 28;
    pub const XI_TS_RST_SRC_GPI_8: Type = 29;
    pub const XI_TS_RST_SRC_GPI_9: Type = 30;
    pub const XI_TS_RST_SRC_GPI_10: Type = 31;
    pub const XI_TS_RST_SRC_GPI_11: Type = 32;
    pub const XI_TS_RST_SRC_GPI_7_INV: Type = 33;
    pub const XI_TS_RST_SRC_GPI_8_INV: Type = 34;
    pub const XI_TS_RST_SRC_GPI_9_INV: Type = 35;
    pub const XI_TS_RST_SRC_GPI_10_INV: Type = 36;
    pub const XI_TS_RST_SRC_GPI_11_INV: Type = 37;
}
pub mod XI_PRM_TYPE {
    pub type Type = ::std::os::raw::c_uint;
    pub const xiTypeInteger: Type = 0;
    pub const xiTypeFloat: Type = 1;
    pub const xiTypeString: Type = 2;
    pub const xiTypeEnum: Type = 3;
    pub const xiTypeBoolean: Type = 4;
    pub const xiTypeCommand: Type = 5;
    pub const xiTypeInteger64: Type = 6;
}
pub mod XI_SWITCH {
    pub type Type = ::std::os::raw::c_uint;
    pub const XI_OFF: Type = 0;
    pub const XI_ON: Type = 1;
}
pub mod XI_TEMP_SELECTOR {
    pub type Type = ::std::os::raw::c_uint;
    pub const XI_TEMP_IMAGE_SENSOR_DIE_RAW: Type = 0;
    pub const XI_TEMP_IMAGE_SENSOR_DIE: Type = 1;
    pub const XI_TEMP_SENSOR_BOARD: Type = 2;
    pub const XI_TEMP_INTERFACE_BOARD: Type = 3;
    pub const XI_TEMP_FRONT_HOUSING: Type = 4;
    pub const XI_TEMP_REAR_HOUSING: Type = 5;
    pub const XI_TEMP_TEC1_COLD: Type = 6;
    pub const XI_TEMP_TEC1_HOT: Type = 7;
}
pub mod XI_TEMP_CTRL_MODE_SELECTOR {
    pub type Type = ::std::os::raw::c_uint;
    pub const XI_TEMP_CTRL_MODE_OFF: Type = 0;
    pub const XI_TEMP_CTRL_MODE_AUTO: Type = 1;
    pub const XI_TEMP_CTRL_MODE_MANUAL: Type = 2;
}
pub mod XI_TEMP_ELEMENT_SELECTOR {
    pub type Type = ::std::os::raw::c_uint;
    pub const XI_TEMP_ELEM_TEC1: Type = 11;
    pub const XI_TEMP_ELEM_TEC2: Type = 12;
    pub const XI_TEMP_ELEM_FAN1: Type = 31;
    pub const XI_TEMP_ELEM_FAN1_THRS_TEMP: Type = 32;
}
pub mod XI_OUTPUT_DATA_PACKING_TYPE {
    pub type Type = ::std::os::raw::c_uint;
    pub const XI_DATA_PACK_XI_GROUPING: Type = 0;
    pub const XI_DATA_PACK_PFNC_LSB_PACKING: Type = 1;
}
pub mod XI_DOWNSAMPLING_TYPE {
    pub type Type = ::std::os::raw::c_uint;
    pub const XI_BINNING: Type = 0;
    pub const XI_SKIPPING: Type = 1;
}
pub mod XI_EXPOSURE_TIME_SELECTOR_TYPE {
    pub type Type = ::std::os::raw::c_uint;
    pub const XI_EXPOSURE_TIME_SELECTOR_COMMON: Type = 0;
    pub const XI_EXPOSURE_TIME_SELECTOR_GROUP1: Type = 1;
    pub const XI_EXPOSURE_TIME_SELECTOR_GROUP2: Type = 2;
}
pub mod XI_INTERLINE_EXPOSURE_MODE_TYPE {
    pub type Type = ::std::os::raw::c_uint;
    pub const XI_INTERLINE_EXPOSURE_MODE_OFF: Type = 0;
    pub const XI_INTERLINE_EXPOSURE_MODE_ON: Type = 1;
}
pub mod XI_GAIN_SELECTOR_TYPE {
    pub type Type = ::std::os::raw::c_uint;
    pub const XI_GAIN_SELECTOR_ALL: Type = 0;
    pub const XI_GAIN_SELECTOR_ANALOG_ALL: Type = 1;
    pub const XI_GAIN_SELECTOR_DIGITAL_ALL: Type = 2;
    pub const XI_GAIN_SELECTOR_ANALOG_TAP1: Type = 3;
    pub const XI_GAIN_SELECTOR_ANALOG_TAP2: Type = 4;
    pub const XI_GAIN_SELECTOR_ANALOG_TAP3: Type = 5;
    pub const XI_GAIN_SELECTOR_ANALOG_TAP4: Type = 6;
    pub const XI_GAIN_SELECTOR_ANALOG_N: Type = 7;
    pub const XI_GAIN_SELECTOR_ANALOG_S: Type = 8;
}
pub mod XI_SHUTTER_TYPE {
    pub type Type = ::std::os::raw::c_uint;
    pub const XI_SHUTTER_GLOBAL: Type = 0;
    pub const XI_SHUTTER_ROLLING: Type = 1;
    pub const XI_SHUTTER_GLOBAL_RESET_RELEASE: Type = 2;
}
pub mod XI_CMS_MODE {
    pub type Type = ::std::os::raw::c_uint;
    pub const XI_CMS_DIS: Type = 0;
    pub const XI_CMS_EN: Type = 1;
    pub const XI_CMS_EN_FAST: Type = 2;
}
pub mod XI_CMS_INTENT {
    pub type Type = ::std::os::raw::c_uint;
    pub const XI_CMS_INTENT_PERCEPTUAL: Type = 0;
    pub const XI_CMS_INTENT_RELATIVE_COLORIMETRIC: Type = 1;
    pub const XI_CMS_INTENT_SATURATION: Type = 2;
    pub const XI_CMS_INTENT_ABSOLUTE_COLORIMETRIC: Type = 3;
}
pub mod XI_OPEN_BY {
    pub type Type = ::std::os::raw::c_uint;
    pub const XI_OPEN_BY_INST_PATH: Type = 0;
    pub const XI_OPEN_BY_SN: Type = 1;
    pub const XI_OPEN_BY_USER_ID: Type = 2;
    pub const XI_OPEN_BY_LOC_PATH: Type = 3;
}
pub mod XI_LENS_FEATURE {
    pub type Type = ::std::os::raw::c_uint;
    pub const XI_LENS_FEATURE_MOTORIZED_FOCUS_SWITCH: Type = 1;
    pub const XI_LENS_FEATURE_MOTORIZED_FOCUS_BOUNDED: Type = 2;
    pub const XI_LENS_FEATURE_MOTORIZED_FOCUS_CALIBRATION: Type = 3;
    pub const XI_LENS_FEATURE_IMAGE_STABILIZATION_ENABLED: Type = 4;
    pub const XI_LENS_FEATURE_IMAGE_STABILIZATION_SWITCH_STATUS: Type = 5;
    pub const XI_LENS_FEATURE_IMAGE_ZOOM_SUPPORTED: Type = 6;
}
pub mod XI_SENSOR_FEATURE_SELECTOR {
    pub type Type = ::std::os::raw::c_uint;
    pub const XI_SENSOR_FEATURE_ZEROROT_ENABLE: Type = 0;
    pub const XI_SENSOR_FEATURE_BLACK_LEVEL_CLAMP: Type = 1;
    pub const XI_SENSOR_FEATURE_MD_FPGA_DIGITAL_GAIN_DISABLE: Type = 2;
    pub const XI_SENSOR_FEATURE_ACQUISITION_RUNNING: Type = 3;
    pub const XI_SENSOR_FEATURE_TIMING_MODE: Type = 4;
    pub const XI_SENSOR_FEATURE_PARALLEL_ADC: Type = 5;
    pub const XI_SENSOR_FEATURE_BLACK_LEVEL_OFFSET_RAW: Type = 6;
    pub const XI_SENSOR_FEATURE_SHORT_INTERVAL_SHUTTER: Type = 7;
    pub const XI_SENSOR_FEATURE_AUTO_LOW_POWER_MODE_AUTO: Type = 8;
    pub const XI_SENSOR_FEATURE_HIGH_CONVERSION_GAIN: Type = 9;
}
pub mod XI_SENSOR_MODE {
    pub type Type = ::std::os::raw::c_uint;
    pub const XI_SENS_MD0: Type = 0;
    pub const XI_SENS_MD1: Type = 1;
    pub const XI_SENS_MD2: Type = 2;
    pub const XI_SENS_MD3: Type = 3;
    pub const XI_SENS_MD4: Type = 4;
    pub const XI_SENS_MD5: Type = 5;
    pub const XI_SENS_MD6: Type = 6;
    pub const XI_SENS_MD7: Type = 7;
    pub const XI_SENS_MD8: Type = 8;
    pub const XI_SENS_MD9: Type = 9;
    pub const XI_SENS_MD10: Type = 10;
    pub const XI_SENS_MD11: Type = 11;
    pub const XI_SENS_MD12: Type = 12;
    pub const XI_SENS_MD13: Type = 13;
    pub const XI_SENS_MD14: Type = 14;
    pub const XI_SENS_MD15: Type = 15;
}
pub mod XI_IMAGE_AREA_SELECTOR {
    pub type Type = ::std::os::raw::c_uint;
    pub const XI_IMAGE_AREA_ACTIVE: Type = 0;
    pub const XI_IMAGE_AREA_ACTIVE_AND_MASKED: Type = 1;
}
pub mod XI_SENSOR_OUTPUT_CHANNEL_COUNT {
    pub type Type = ::std::os::raw::c_uint;
    pub const XI_CHANN_CNT2: Type = 2;
    pub const XI_CHANN_CNT4: Type = 4;
    pub const XI_CHANN_CNT8: Type = 8;
    pub const XI_CHANN_CNT16: Type = 16;
    pub const XI_CHANN_CNT24: Type = 24;
    pub const XI_CHANN_CNT32: Type = 32;
    pub const XI_CHANN_CNT48: Type = 48;
}
pub mod XI_SENS_DEFFECTS_CORR_LIST_SELECTOR {
    pub type Type = ::std::os::raw::c_uint;
    pub const XI_SENS_DEFFECTS_CORR_LIST_SEL_FACTORY: Type = 0;
    pub const XI_SENS_DEFFECTS_CORR_LIST_SEL_USER0: Type = 1;
    pub const XI_SENS_DEFFECTS_CORR_LIST_SEL_IN_CAMERA: Type = 2;
}
pub mod XI_ACQUISITION_STATUS_SELECTOR {
    pub type Type = ::std::os::raw::c_uint;
    pub const XI_ACQUISITION_STATUS_ACQ_ACTIVE: Type = 0;
}
pub mod XI_DP_UNIT_SELECTOR {
    pub type Type = ::std::os::raw::c_uint;
    pub const XI_DP_UNIT_SENSOR: Type = 0;
    pub const XI_DP_UNIT_FPGA: Type = 1;
}
pub mod XI_DP_PROC_SELECTOR {
    pub type Type = ::std::os::raw::c_uint;
    pub const XI_DP_PROC_NONE: Type = 0;
    pub const XI_DP_PROC_CHANNEL_MUXER: Type = 1;
    pub const XI_DP_PROC_PIXEL_SEQUENCER: Type = 2;
    pub const XI_DP_PROC_CHANNEL_1: Type = 3;
    pub const XI_DP_PROC_CHANNEL_2: Type = 4;
    pub const XI_DP_PROC_FRAME_BUFFER: Type = 5;
}
pub mod XI_DP_PARAM_SELECTOR {
    pub type Type = ::std::os::raw::c_uint;
    pub const XI_DP_PARAM_NONE: Type = 0;
    pub const XI_DP_PARAM_CHMUX_CHANNEL_SELECTOR: Type = 1;
    pub const XI_DP_PARAM_CHMUX_ALPHA: Type = 2;
    pub const XI_DP_PARAM_CHMUX_BETA: Type = 3;
    pub const XI_DP_PARAM_PIXSEQ_SELECTOR: Type = 4;
    pub const XI_DP_PARAM_CHANNEL_TIMING: Type = 5;
    pub const XI_DP_PARAM_FRAMEBUF_MODE: Type = 6;
    pub const XI_DP_PARAM_FRAMEBUF_SIZE: Type = 7;
}
pub mod XI_DP_PARAM_VALUE {
    pub type Type = ::std::os::raw::c_uint;
    pub const XI_DP_PARAM_VALUE_CHMUX_CHANNEL_1: Type = 0;
    pub const XI_DP_PARAM_VALUE_CHMUX_CHANNEL_2: Type = 1;
    pub const XI_DP_PARAM_VALUE_CHMUX_CHANNEL_1_2: Type = 2;
    pub const XI_DP_PARAM_VALUE_CHMUX_MERGED: Type = 3;
    pub const XI_DP_PARAM_VALUE_CHMUX_CMS_S: Type = 4;
    pub const XI_DP_PARAM_VALUE_PIXSEQ_ONE_VALUE: Type = 5;
    pub const XI_DP_PARAM_VALUE_PIXSEQ_TWO_VALUES: Type = 6;
    pub const XI_DP_PARAM_VALUE_CHTIM_HG: Type = 7;
    pub const XI_DP_PARAM_VALUE_CHTIM_LG: Type = 8;
    pub const XI_DP_PARAM_VALUE_FRAMEBUF_MODE_DISABLED: Type = 9;
    pub const XI_DP_PARAM_VALUE_FRAMEBUF_MODE_ENABLED: Type = 10;
    pub const XI_DP_PARAM_VALUE_PIXSEQ_FOUR_VALUES: Type = 11;
    pub const XI_DP_PARAM_VALUE_CHMUX_CMS_A: Type = 12;
}
pub mod XI_USER_SET_SELECTOR {
    pub type Type = ::std::os::raw::c_uint;
    pub const XI_US_12_STD_L: Type = 10;
    pub const XI_US_12_STD_H: Type = 11;
    pub const XI_US_14_STD_L: Type = 12;
    pub const XI_US_NONE: Type = 999;
    pub const XI_US_14_STD_H: Type = 13;
    pub const XI_US_2_12_CMS_S_L: Type = 14;
    pub const XI_US_2_12_CMS_S_H: Type = 15;
    pub const XI_US_2_14_CMS_S_L: Type = 16;
    pub const XI_US_2_14_CMS_S_H: Type = 17;
    pub const XI_US_4_12_CMS_S_L: Type = 18;
    pub const XI_US_4_12_CMS_S_H: Type = 19;
    pub const XI_US_4_14_CMS_S_L: Type = 20;
    pub const XI_US_4_14_CMS_S_H: Type = 21;
    pub const XI_US_2_12_HDR_HL: Type = 22;
    pub const XI_US_2_12_HDR_L: Type = 23;
    pub const XI_US_2_12_HDR_H: Type = 24;
    pub const XI_US_4_12_CMS_HDR_HL: Type = 25;
    pub const XI_US_2_14_HDR_L: Type = 26;
    pub const XI_US_2_14_HDR_H: Type = 27;
    pub const XI_US_2_12_CMS_A_L: Type = 28;
    pub const XI_US_2_12_CMS_A_H: Type = 29;
}
pub mod XI_DUAL_ADC_MODE {
    pub type Type = ::std::os::raw::c_uint;
    pub const XI_DUAL_ADC_MODE_OFF: Type = 0;
    pub const XI_DUAL_ADC_MODE_COMBINED: Type = 1;
    pub const XI_DUAL_ADC_MODE_NON_COMBINED: Type = 2;
}
pub mod XI_PROBE_SELECTOR {
    pub type Type = ::std::os::raw::c_uint;
    pub const XI_PROBE_SELECTOR_CURRENT_MAINBOARD_VCC_IN: Type = 0;
    pub const XI_PROBE_SELECTOR_VOLTAGE_MAINBOARD_VCC_IN: Type = 1;
    pub const XI_PROBE_SELECTOR_CURRENT_MAINBOARD_VCC_ADJ2: Type = 2;
    pub const XI_PROBE_SELECTOR_VOLTAGE_MAINBOARD_VCC_ADJ2: Type = 3;
    pub const XI_PROBE_SELECTOR_CURRENT_MAINBOARD_VCC_ADJ1: Type = 4;
    pub const XI_PROBE_SELECTOR_VOLTAGE_MAINBOARD_VCC_ADJ1: Type = 5;
    pub const XI_PROBE_SELECTOR_CURRENT_MAINBOARD_VCC_PLT: Type = 6;
    pub const XI_PROBE_SELECTOR_VOLTAGE_MAINBOARD_VCC_PLT: Type = 7;
    pub const XI_PROBE_SELECTOR_VOLTAGE_SENSORBOARD_VCC_ADJ1: Type = 8;
    pub const XI_PROBE_SELECTOR_VOLTAGE_SENSORBOARD_VCC_ADJ2: Type = 9;
    pub const XI_PROBE_SELECTOR_VOLTAGE_SENSORBOARD_VCC_5V0: Type = 10;
    pub const XI_PROBE_SELECTOR_VOLTAGE_SENSORBOARD_VCC_3V3: Type = 11;
}
pub mod XI_GenTL_Image_Format_e {
    pub type Type = ::std::os::raw::c_uint;
    pub const XI_GenTL_Image_Format_Mono8: Type = 17301505;
    pub const XI_GenTL_Image_Format_BGRA8: Type = 35651607;
    pub const XI_GenTL_Image_Format_RGB8Planar: Type = 35127329;
    pub const XI_GenTL_Image_Format_BayerRG8: Type = 17301513;
    pub const XI_GenTL_Image_Format_Mono10: Type = 17825795;
    pub const XI_GenTL_Image_Format_Mono12: Type = 17825797;
    pub const XI_GenTL_Image_Format_Mono14: Type = 17825829;
    pub const XI_GenTL_Image_Format_BayerRG10: Type = 17825805;
    pub const XI_GenTL_Image_Format_BayerRG12: Type = 17825809;
    pub const XI_GenTL_Image_Format_BayerGR8: Type = 17301512;
    pub const XI_GenTL_Image_Format_BayerGB8: Type = 17301514;
    pub const XI_GenTL_Image_Format_BayerGR10: Type = 17825804;
    pub const XI_GenTL_Image_Format_BayerGB10: Type = 17825806;
    pub const XI_GenTL_Image_Format_BayerGR12: Type = 17825808;
    pub const XI_GenTL_Image_Format_BayerBG8: Type = 17301515;
    pub const XI_GenTL_Image_Format_BayerBG10: Type = 17825807;
    pub const XI_GenTL_Image_Format_BayerBG12: Type = 17825811;
    pub const XI_GenTL_Image_Format_BayerGB12: Type = 17825810;
    pub const XI_GenTL_Image_Format_RGB8: Type = 35127316;
    pub const XI_GenTL_Image_Format_BGR8: Type = 35127317;
    pub const XI_GenTL_Image_Format_BayerRG14: Type = 17826058;
    pub const XI_GenTL_Image_Format_BayerGR14: Type = 17826057;
    pub const XI_GenTL_Image_Format_BayerBG14: Type = 17826060;
    pub const XI_GenTL_Image_Format_BayerGB14: Type = 17826059;
    pub const XI_GenTL_Image_Format_BayerBG10p: Type = 17432658;
    pub const XI_GenTL_Image_Format_BayerGB10p: Type = 17432660;
    pub const XI_GenTL_Image_Format_BayerGR10p: Type = 17432662;
    pub const XI_GenTL_Image_Format_BayerRG10p: Type = 17432664;
    pub const XI_GenTL_Image_Format_Mono10p: Type = 17432646;
    pub const XI_GenTL_Image_Format_BayerBG12p: Type = 17563731;
    pub const XI_GenTL_Image_Format_BayerGB12p: Type = 17563733;
    pub const XI_GenTL_Image_Format_BayerGR12p: Type = 17563735;
    pub const XI_GenTL_Image_Format_BayerRG12p: Type = 17563737;
    pub const XI_GenTL_Image_Format_Mono12p: Type = 17563719;
    pub const XI_GenTL_Image_Format_BayerBG14p: Type = 17694984;
    pub const XI_GenTL_Image_Format_BayerGB14p: Type = 17694983;
    pub const XI_GenTL_Image_Format_BayerGR14p: Type = 17694981;
    pub const XI_GenTL_Image_Format_BayerRG14p: Type = 17694982;
    pub const XI_GenTL_Image_Format_Mono14p: Type = 17694980;
    pub const XI_GenTL_Image_Format_xiBayerBG10g160: Type = 2181038346;
    pub const XI_GenTL_Image_Format_xiBayerGB10g160: Type = 2181038602;
    pub const XI_GenTL_Image_Format_xiBayerGR10g160: Type = 2181038858;
    pub const XI_GenTL_Image_Format_xiBayerRG10g160: Type = 2181039114;
    pub const XI_GenTL_Image_Format_xiMono10g160: Type = 2181038090;
    pub const XI_GenTL_Image_Format_xiBayerBG12g192: Type = 2181038348;
    pub const XI_GenTL_Image_Format_xiBayerGB12g192: Type = 2181038604;
    pub const XI_GenTL_Image_Format_xiBayerGR12g192: Type = 2181038860;
    pub const XI_GenTL_Image_Format_xiBayerRG12g192: Type = 2181039116;
    pub const XI_GenTL_Image_Format_xiMono12g192: Type = 2181038092;
    pub const XI_GenTL_Image_Format_xiBayerBG14g224: Type = 2181038350;
    pub const XI_GenTL_Image_Format_xiBayerGB14g224: Type = 2181038606;
    pub const XI_GenTL_Image_Format_xiBayerGR14g224: Type = 2181038862;
    pub const XI_GenTL_Image_Format_xiBayerRG14g224: Type = 2181039118;
    pub const XI_GenTL_Image_Format_xiMono14g224: Type = 2181038094;
    pub const XI_GenTL_Image_Format_xiMono8TS01: Type = 2147549192;
    pub const XI_GenTL_Image_Format_xiMono10TS01: Type = 2147549194;
    pub const XI_GenTL_Image_Format_xiMono12TS01: Type = 2147549196;
    pub const XI_GenTL_Image_Format_xiMono14TS01: Type = 2147549198;
    pub const XI_GenTL_Image_Format_xiBayerRG8TS01: Type = 2147550216;
    pub const XI_GenTL_Image_Format_xiBayerRG10TS01: Type = 2147550218;
    pub const XI_GenTL_Image_Format_xiBayerRG12TS01: Type = 2147550220;
    pub const XI_GenTL_Image_Format_xiBayerRG14TS01: Type = 2147550222;
    pub const XI_GenTL_Image_Format_xiBayerBG8TS01: Type = 2147549448;
    pub const XI_GenTL_Image_Format_xiBayerBG10TS01: Type = 2147549450;
    pub const XI_GenTL_Image_Format_xiBayerBG12TS01: Type = 2147549452;
    pub const XI_GenTL_Image_Format_xiBayerBG14TS01: Type = 2147549454;
    pub const XI_GenTL_Image_Format_xiBayerGB8TS01: Type = 2147549704;
    pub const XI_GenTL_Image_Format_xiBayerGB10TS01: Type = 2147549706;
    pub const XI_GenTL_Image_Format_xiBayerGB12TS01: Type = 2147549708;
    pub const XI_GenTL_Image_Format_xiBayerGB14TS01: Type = 2147549710;
    pub const XI_GenTL_Image_Format_xiBayerGR8TS01: Type = 2147549960;
    pub const XI_GenTL_Image_Format_xiBayerGR10TS01: Type = 2147549962;
    pub const XI_GenTL_Image_Format_xiBayerGR12TS01: Type = 2147549964;
    pub const XI_GenTL_Image_Format_xiBayerGR14TS01: Type = 2147549966;
    pub const XI_GenTL_Image_Format_xiMono8TS03: Type = 2147680264;
    pub const XI_GenTL_Image_Format_xiMono10TS03: Type = 2147680266;
    pub const XI_GenTL_Image_Format_xiMono12TS03: Type = 2147680268;
    pub const XI_GenTL_Image_Format_xiMono14TS03: Type = 2147680270;
    pub const XI_GenTL_Image_Format_xiBayerRG8TS03: Type = 2147681288;
    pub const XI_GenTL_Image_Format_xiBayerRG10TS03: Type = 2147681290;
    pub const XI_GenTL_Image_Format_xiBayerRG12TS03: Type = 2147681292;
    pub const XI_GenTL_Image_Format_xiBayerRG14TS03: Type = 2147681294;
    pub const XI_GenTL_Image_Format_xiBayerBG8TS03: Type = 2147680520;
    pub const XI_GenTL_Image_Format_xiBayerBG10TS03: Type = 2147680522;
    pub const XI_GenTL_Image_Format_xiBayerBG12TS03: Type = 2147680524;
    pub const XI_GenTL_Image_Format_xiBayerBG14TS03: Type = 2147680526;
    pub const XI_GenTL_Image_Format_xiBayerGB8TS03: Type = 2147680776;
    pub const XI_GenTL_Image_Format_xiBayerGB10TS03: Type = 2147680778;
    pub const XI_GenTL_Image_Format_xiBayerGB12TS03: Type = 2147680780;
    pub const XI_GenTL_Image_Format_xiBayerGB14TS03: Type = 2147680782;
    pub const XI_GenTL_Image_Format_xiBayerGR8TS03: Type = 2147681032;
    pub const XI_GenTL_Image_Format_xiBayerGR10TS03: Type = 2147681034;
    pub const XI_GenTL_Image_Format_xiBayerGR12TS03: Type = 2147681036;
    pub const XI_GenTL_Image_Format_xiBayerGR14TS03: Type = 2147681038;
    pub const XI_GenTL_Image_Format_Mono16: Type = 17825799;
    pub const XI_GenTL_Image_Format_BayerGR16: Type = 17825838;
    pub const XI_GenTL_Image_Format_BayerRG16: Type = 17825839;
    pub const XI_GenTL_Image_Format_BayerGB16: Type = 17825840;
    pub const XI_GenTL_Image_Format_BayerBG16: Type = 17825841;
    pub const XI_GenTL_Image_Format_xiMono16TS03: Type = 2147680272;
    pub const XI_GenTL_Image_Format_xiMono16TS01: Type = 2147549200;
    pub const XI_GenTL_Image_Format_xiBayerRG16TS01: Type = 2147550224;
    pub const XI_GenTL_Image_Format_xiBayerBG16TS01: Type = 2147549456;
    pub const XI_GenTL_Image_Format_xiBayerGB16TS01: Type = 2147549712;
    pub const XI_GenTL_Image_Format_xiBayerGR16TS01: Type = 2147549968;
    pub const XI_GenTL_Image_Format_xiBayerRG16TS03: Type = 2147681296;
    pub const XI_GenTL_Image_Format_xiBayerBG16TS03: Type = 2147680528;
    pub const XI_GenTL_Image_Format_xiBayerGB16TS03: Type = 2147680784;
    pub const XI_GenTL_Image_Format_xiBayerGR16TS03: Type = 2147681040;
    pub const XI_GenTL_Image_Format_xiMono16TS04: Type = 2147745808;
    pub const XI_GenTL_Image_Format_xiBayerRG16TS04: Type = 2147746832;
    pub const XI_GenTL_Image_Format_xiBayerBG16TS04: Type = 2147746064;
    pub const XI_GenTL_Image_Format_xiBayerGB16TS04: Type = 2147746320;
    pub const XI_GenTL_Image_Format_xiBayerGR16TS04: Type = 2147746576;
    pub const XI_GenTL_Image_Format_xiMono16TS02: Type = 2147614736;
    pub const XI_GenTL_Image_Format_xiMono8TS02: Type = 2147614728;
    pub const XI_GenTL_Image_Format_xiMono10TS02: Type = 2147614730;
    pub const XI_GenTL_Image_Format_xiMono12TS02: Type = 2147614732;
    pub const XI_GenTL_Image_Format_xiMono14TS02: Type = 2147614734;
    pub const XI_GenTL_Image_Format_xiBayerRG8TS02: Type = 2147615752;
    pub const XI_GenTL_Image_Format_xiBayerRG10TS02: Type = 2147615754;
    pub const XI_GenTL_Image_Format_xiBayerRG12TS02: Type = 2147615756;
    pub const XI_GenTL_Image_Format_xiBayerRG14TS02: Type = 2147615758;
    pub const XI_GenTL_Image_Format_xiBayerRG16TS02: Type = 2147615760;
    pub const XI_GenTL_Image_Format_xiBayerBG8TS02: Type = 2147614984;
    pub const XI_GenTL_Image_Format_xiBayerBG10TS02: Type = 2147614986;
    pub const XI_GenTL_Image_Format_xiBayerBG12TS02: Type = 2147614988;
    pub const XI_GenTL_Image_Format_xiBayerBG14TS02: Type = 2147614990;
    pub const XI_GenTL_Image_Format_xiBayerBG16TS02: Type = 2147614992;
    pub const XI_GenTL_Image_Format_xiBayerGB8TS02: Type = 2147615240;
    pub const XI_GenTL_Image_Format_xiBayerGB10TS02: Type = 2147615242;
    pub const XI_GenTL_Image_Format_xiBayerGB12TS02: Type = 2147615244;
    pub const XI_GenTL_Image_Format_xiBayerGB14TS02: Type = 2147615246;
    pub const XI_GenTL_Image_Format_xiBayerGB16TS02: Type = 2147615248;
    pub const XI_GenTL_Image_Format_xiBayerGR8TS02: Type = 2147615496;
    pub const XI_GenTL_Image_Format_xiBayerGR10TS02: Type = 2147615498;
    pub const XI_GenTL_Image_Format_xiBayerGR12TS02: Type = 2147615500;
    pub const XI_GenTL_Image_Format_xiBayerGR14TS02: Type = 2147615502;
    pub const XI_GenTL_Image_Format_xiBayerGR16TS02: Type = 2147615504;
    pub const XI_GenTL_Image_Format_xiMono8TS04: Type = 2147745800;
    pub const XI_GenTL_Image_Format_xiMono10TS04: Type = 2147745802;
    pub const XI_GenTL_Image_Format_xiMono12TS04: Type = 2147745804;
    pub const XI_GenTL_Image_Format_xiMono14TS04: Type = 2147745806;
    pub const XI_GenTL_Image_Format_xiBayerRG8TS04: Type = 2147746824;
    pub const XI_GenTL_Image_Format_xiBayerRG10TS04: Type = 2147746826;
    pub const XI_GenTL_Image_Format_xiBayerRG12TS04: Type = 2147746828;
    pub const XI_GenTL_Image_Format_xiBayerRG14TS04: Type = 2147746830;
    pub const XI_GenTL_Image_Format_xiBayerBG8TS04: Type = 2147746056;
    pub const XI_GenTL_Image_Format_xiBayerBG10TS04: Type = 2147746058;
    pub const XI_GenTL_Image_Format_xiBayerBG12TS04: Type = 2147746060;
    pub const XI_GenTL_Image_Format_xiBayerBG14TS04: Type = 2147746062;
    pub const XI_GenTL_Image_Format_xiBayerGB8TS04: Type = 2147746312;
    pub const XI_GenTL_Image_Format_xiBayerGB10TS04: Type = 2147746314;
    pub const XI_GenTL_Image_Format_xiBayerGB12TS04: Type = 2147746316;
    pub const XI_GenTL_Image_Format_xiBayerGB14TS04: Type = 2147746318;
    pub const XI_GenTL_Image_Format_xiBayerGR8TS04: Type = 2147746568;
    pub const XI_GenTL_Image_Format_xiBayerGR10TS04: Type = 2147746570;
    pub const XI_GenTL_Image_Format_xiBayerGR12TS04: Type = 2147746572;
    pub const XI_GenTL_Image_Format_xiBayerGR14TS04: Type = 2147746574;
    pub const XI_GenTL_Image_Format_Mono9p: Type = 2164260873;
    pub const XI_GenTL_Image_Format_BayerBG9p: Type = 2164261129;
    pub const XI_GenTL_Image_Format_BayerGB9p: Type = 2164261385;
    pub const XI_GenTL_Image_Format_BayerGR9p: Type = 2164261641;
    pub const XI_GenTL_Image_Format_BayerRG9p: Type = 2164261897;
    pub const XI_GenTL_Image_Format_Mono11p: Type = 2164260875;
    pub const XI_GenTL_Image_Format_BayerBG11p: Type = 2164261131;
    pub const XI_GenTL_Image_Format_BayerGB11p: Type = 2164261387;
    pub const XI_GenTL_Image_Format_BayerGR11p: Type = 2164261643;
    pub const XI_GenTL_Image_Format_BayerRG11p: Type = 2164261899;
    pub const XI_GenTL_Image_Format_Mono9: Type = 2147483657;
    pub const XI_GenTL_Image_Format_BayerBG9: Type = 2147483913;
    pub const XI_GenTL_Image_Format_BayerGB9: Type = 2147484169;
    pub const XI_GenTL_Image_Format_BayerGR9: Type = 2147484425;
    pub const XI_GenTL_Image_Format_BayerRG9: Type = 2147484681;
    pub const XI_GenTL_Image_Format_Mono11: Type = 2147483659;
    pub const XI_GenTL_Image_Format_BayerBG11: Type = 2147483915;
    pub const XI_GenTL_Image_Format_BayerGB11: Type = 2147484171;
    pub const XI_GenTL_Image_Format_BayerGR11: Type = 2147484427;
    pub const XI_GenTL_Image_Format_BayerRG11: Type = 2147484683;
    pub const XI_GenTL_Image_Format_xiMono12g96l_m9e3: Type = 2197819404;
    pub const XI_GenTL_Image_Format_xiBayerGB12pMS41: Type = 2168521228;
    pub const XI_GenTL_Image_Format_xiMono12pMS41: Type = 2168520716;
    pub const XI_GenTL_Image_Format_xiBayerGB10pMS41: Type = 2168521226;
    pub const XI_GenTL_Image_Format_xiBayerGB12MS41: Type = 2151744012;
    pub const XI_GenTL_Image_Format_xiBayerGB10MS41: Type = 2151744010;
    pub const XI_GenTL_Image_Format_xiMono10pMS51: Type = 2169569290;
    pub const XI_GenTL_Image_Format_xiMono10pMS41: Type = 2168520714;
    pub const XI_GenTL_Image_Format_xiBayerGB10pMS51: Type = 2169569802;
    pub const XI_GenTL_Image_Format_xiMono12MS41: Type = 2151743500;
    pub const XI_GenTL_Image_Format_xiMono10MS51: Type = 2152792074;
    pub const XI_GenTL_Image_Format_xiMono10MS41: Type = 2151743498;
    pub const XI_GenTL_Image_Format_xiBayerGB10MS51: Type = 2152792586;
    pub const XI_GenTL_Image_Format_xiBayerGB8MS41: Type = 2151744008;
    pub const XI_GenTL_Image_Format_xiMono8MS51: Type = 2152792072;
    pub const XI_GenTL_Image_Format_xiMono8MS41: Type = 2151743496;
    pub const XI_GenTL_Image_Format_xiBayerGB8MS51: Type = 2152792584;
    pub const XI_GenTL_Image_Format_xiMono_m9e3: Type = 2147487760;
    pub const XI_GenTL_Image_Format_RGBA8: Type = 35651606;
    pub const XI_GenTL_Image_Format_RGB16Planar: Type = 36700196;
    pub const XI_GenTL_Image_Format_BGRA16: Type = 37748817;
    pub const XI_GenTL_Image_Format_BGR16: Type = 36700235;
    pub const XI_GenTL_Image_Format_RGBA16: Type = 37748836;
    pub const XI_GenTL_Image_Format_RGB16: Type = 36700211;
    pub const XI_GenTL_Image_Format_xiMono8MS52: Type = 2152857608;
    pub const XI_GenTL_Image_Format_xiMono10pMS52: Type = 2169634826;
    pub const XI_GenTL_Image_Format_xiMono10MS52: Type = 2152857610;
    pub const XI_GenTL_Image_Format_xiMono12p_m9e3: Type = 2164264972;
    pub const XI_GenTL_Image_Format_xiMono16LS31: Type = 2150694928;
    pub const XI_GenTL_Image_Format_xiPaBayerBG8: Type = 2147485192;
    pub const XI_GenTL_Image_Format_xiPaBayerBG10: Type = 2147485194;
    pub const XI_GenTL_Image_Format_xiMono12pLS31: Type = 2167472140;
    pub const XI_GenTL_Image_Format_xiMono12LS31: Type = 2150694924;
    pub const XI_GenTL_Image_Format_xiMono16LS32: Type = 2150760464;
    pub const XI_GenTL_Image_Format_xiMono12pLS32: Type = 2167537676;
    pub const XI_GenTL_Image_Format_xiMono12LS32: Type = 2150760460;
    pub const XI_GenTL_Image_Format_Mono32: Type = 18874641;
    pub const XI_GenTL_Image_Format_BayerRG32: Type = 2147484704;
    pub const XI_GenTL_Image_Format_BayerGR32: Type = 2147484448;
    pub const XI_GenTL_Image_Format_BayerBG32: Type = 2147483936;
    pub const XI_GenTL_Image_Format_BayerGB32: Type = 2147484192;
    pub const XI_GenTL_Image_Format_Mono32f: Type = 2147495968;
    pub const XI_GenTL_Image_Format_BayerBG32f: Type = 2147496224;
    pub const XI_GenTL_Image_Format_BayerGB32f: Type = 2147496480;
    pub const XI_GenTL_Image_Format_BayerGR32f: Type = 2147496736;
    pub const XI_GenTL_Image_Format_BayerRG32f: Type = 2147496992;
    pub const XI_GenTL_Image_Format_xiMono_m13e3: Type = 2147500048;
    pub const XI_GenTL_Image_Format_BayerBG24: Type = 2147483928;
    pub const XI_GenTL_Image_Format_BayerGB24: Type = 2147484184;
    pub const XI_GenTL_Image_Format_BayerGR24: Type = 2147484440;
    pub const XI_GenTL_Image_Format_BayerRG24: Type = 2147484696;
    pub const XI_GenTL_Image_Format_Mono24: Type = 2147483672;
    pub const XI_GenTL_Image_Format_xiBayerRG10MS41: Type = 2151744522;
    pub const XI_GenTL_Image_Format_xiBayerBG10MS41: Type = 2151743754;
    pub const XI_GenTL_Image_Format_xiBayerGR10MS41: Type = 2151744266;
    pub const XI_GenTL_Image_Format_xiBayerBG10pMS41: Type = 2168520970;
    pub const XI_GenTL_Image_Format_xiBayerGR10pMS41: Type = 2168521482;
    pub const XI_GenTL_Image_Format_xiBayerRG10pMS41: Type = 2168521738;
    pub const XI_GenTL_Image_Format_xiBayerBG12MS41: Type = 2151743756;
    pub const XI_GenTL_Image_Format_xiBayerGR12MS41: Type = 2151744268;
    pub const XI_GenTL_Image_Format_xiBayerRG12MS41: Type = 2151744524;
    pub const XI_GenTL_Image_Format_xiBayerBG12pMS41: Type = 2168520972;
    pub const XI_GenTL_Image_Format_xiBayerGR12pMS41: Type = 2168521484;
    pub const XI_GenTL_Image_Format_xiBayerRG12pMS41: Type = 2168521740;
    pub const XI_GenTL_Image_Format_xiBayerBG8MS41: Type = 2151743752;
    pub const XI_GenTL_Image_Format_xiBayerGR8MS41: Type = 2151744264;
    pub const XI_GenTL_Image_Format_xiBayerRG8MS41: Type = 2151744520;
    pub const XI_GenTL_Image_Format_xiBayerBG11MS41: Type = 2151743755;
    pub const XI_GenTL_Image_Format_xiBayerGB11MS41: Type = 2151744011;
    pub const XI_GenTL_Image_Format_xiBayerGR11MS41: Type = 2151744267;
    pub const XI_GenTL_Image_Format_xiBayerRG11MS41: Type = 2151744523;
    pub const XI_GenTL_Image_Format_xiMono11MS41: Type = 2151743499;
    pub const XI_GenTL_Image_Format_xiBayerBG11pMS41: Type = 2168520971;
    pub const XI_GenTL_Image_Format_xiBayerGB11pMS41: Type = 2168521227;
    pub const XI_GenTL_Image_Format_xiBayerGR11pMS41: Type = 2168521483;
    pub const XI_GenTL_Image_Format_xiBayerRG11pMS41: Type = 2168521739;
    pub const XI_GenTL_Image_Format_xiMono11pMS41: Type = 2168520715;
    pub const XI_GenTL_Image_Format_xiMono8LS32: Type = 2150760456;
    pub const XI_GenTL_Image_Format_xiMono8LS31: Type = 2150694920;
    pub const XI_GenTL_Image_Format_xiPaBayerBG10p: Type = 2164262410;
    pub const XI_GenTL_Image_Format_xiPaBayerBG12: Type = 2147485196;
    pub const XI_GenTL_Image_Format_xiPaBayerBG12p: Type = 2164262412;
    pub const XI_GenTL_Image_Format_xiPaMono8: Type = 2147484936;
    pub const XI_GenTL_Image_Format_xiPaMono10: Type = 2147484938;
    pub const XI_GenTL_Image_Format_xiPaMono10p: Type = 2164262154;
    pub const XI_GenTL_Image_Format_xiPaMono12: Type = 2147484940;
    pub const XI_GenTL_Image_Format_xiPaMono12p: Type = 2164262156;
    pub const XI_GenTL_Image_Format_xiMono16MS41: Type = 2151743504;
    pub const XI_GenTL_Image_Format_xiBayerBG16MS41: Type = 2151743760;
    pub const XI_GenTL_Image_Format_xiBayerGB16MS41: Type = 2151744016;
    pub const XI_GenTL_Image_Format_xiBayerGR16MS41: Type = 2151744272;
    pub const XI_GenTL_Image_Format_xiBayerRG16MS41: Type = 2151744528;
    pub const XI_GenTL_Image_Format_xiBayerBG14MS41: Type = 2151743758;
    pub const XI_GenTL_Image_Format_xiBayerBG14pMS41: Type = 2168520974;
    pub const XI_GenTL_Image_Format_xiBayerGB14MS41: Type = 2151744014;
    pub const XI_GenTL_Image_Format_xiBayerGB14pMS41: Type = 2168521230;
    pub const XI_GenTL_Image_Format_xiBayerGR14MS41: Type = 2151744270;
    pub const XI_GenTL_Image_Format_xiBayerGR14pMS41: Type = 2168521486;
    pub const XI_GenTL_Image_Format_xiBayerRG14MS41: Type = 2151744526;
    pub const XI_GenTL_Image_Format_xiBayerRG14pMS41: Type = 2168521742;
    pub const XI_GenTL_Image_Format_xiMono14MS41: Type = 2151743502;
    pub const XI_GenTL_Image_Format_xiMono14pMS41: Type = 2168520718;
}
#[repr(C)]
#[derive(Debug, Default, Copy, Clone)]
pub struct XI_IMG_DESC {
    pub Area0Left: DWORD,
    pub Area1Left: DWORD,
    pub Area2Left: DWORD,
    pub Area3Left: DWORD,
    pub Area4Left: DWORD,
    pub Area5Left: DWORD,
    pub ActiveAreaWidth: DWORD,
    pub Area5Right: DWORD,
    pub Area4Right: DWORD,
    pub Area3Right: DWORD,
    pub Area2Right: DWORD,
    pub Area1Right: DWORD,
    pub Area0Right: DWORD,
    pub Area0Top: DWORD,
    pub Area1Top: DWORD,
    pub Area2Top: DWORD,
    pub Area3Top: DWORD,
    pub Area4Top: DWORD,
    pub Area5Top: DWORD,
    pub ActiveAreaHeight: DWORD,
    pub Area5Bottom: DWORD,
    pub Area4Bottom: DWORD,
    pub Area3Bottom: DWORD,
    pub Area2Bottom: DWORD,
    pub Area1Bottom: DWORD,
    pub Area0Bottom: DWORD,
    pub format: DWORD,
    pub flags: DWORD,
}
#[test]
fn bindgen_test_layout_XI_IMG_DESC() {
    const UNINIT: ::std::mem::MaybeUninit<XI_IMG_DESC> = ::std::mem::MaybeUninit::uninit();
    let ptr = UNINIT.as_ptr();
    assert_eq!(
        ::std::mem::size_of::<XI_IMG_DESC>(),
        112usize,
        concat!("Size of: ", stringify!(XI_IMG_DESC))
    );
    assert_eq!(
        ::std::mem::align_of::<XI_IMG_DESC>(),
        4usize,
        concat!("Alignment of ", stringify!(XI_IMG_DESC))
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).Area0Left) as usize - ptr as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(XI_IMG_DESC),
            "::",
            stringify!(Area0Left)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).Area1Left) as usize - ptr as usize },
        4usize,
        concat!(
            "Offset of field: ",
            stringify!(XI_IMG_DESC),
            "::",
            stringify!(Area1Left)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).Area2Left) as usize - ptr as usize },
        8usize,
        concat!(
            "Offset of field: ",
            stringify!(XI_IMG_DESC),
            "::",
            stringify!(Area2Left)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).Area3Left) as usize - ptr as usize },
        12usize,
        concat!(
            "Offset of field: ",
            stringify!(XI_IMG_DESC),
            "::",
            stringify!(Area3Left)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).Area4Left) as usize - ptr as usize },
        16usize,
        concat!(
            "Offset of field: ",
            stringify!(XI_IMG_DESC),
            "::",
            stringify!(Area4Left)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).Area5Left) as usize - ptr as usize },
        20usize,
        concat!(
            "Offset of field: ",
            stringify!(XI_IMG_DESC),
            "::",
            stringify!(Area5Left)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).ActiveAreaWidth) as usize - ptr as usize },
        24usize,
        concat!(
            "Offset of field: ",
            stringify!(XI_IMG_DESC),
            "::",
            stringify!(ActiveAreaWidth)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).Area5Right) as usize - ptr as usize },
        28usize,
        concat!(
            "Offset of field: ",
            stringify!(XI_IMG_DESC),
            "::",
            stringify!(Area5Right)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).Area4Right) as usize - ptr as usize },
        32usize,
        concat!(
            "Offset of field: ",
            stringify!(XI_IMG_DESC),
            "::",
            stringify!(Area4Right)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).Area3Right) as usize - ptr as usize },
        36usize,
        concat!(
            "Offset of field: ",
            stringify!(XI_IMG_DESC),
            "::",
            stringify!(Area3Right)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).Area2Right) as usize - ptr as usize },
        40usize,
        concat!(
            "Offset of field: ",
            stringify!(XI_IMG_DESC),
            "::",
            stringify!(Area2Right)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).Area1Right) as usize - ptr as usize },
        44usize,
        concat!(
            "Offset of field: ",
            stringify!(XI_IMG_DESC),
            "::",
            stringify!(Area1Right)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).Area0Right) as usize - ptr as usize },
        48usize,
        concat!(
            "Offset of field: ",
            stringify!(XI_IMG_DESC),
            "::",
            stringify!(Area0Right)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).Area0Top) as usize - ptr as usize },
        52usize,
        concat!(
            "Offset of field: ",
            stringify!(XI_IMG_DESC),
            "::",
            stringify!(Area0Top)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).Area1Top) as usize - ptr as usize },
        56usize,
        concat!(
            "Offset of field: ",
            stringify!(XI_IMG_DESC),
            "::",
            stringify!(Area1Top)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).Area2Top) as usize - ptr as usize },
        60usize,
        concat!(
            "Offset of field: ",
            stringify!(XI_IMG_DESC),
            "::",
            stringify!(Area2Top)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).Area3Top) as usize - ptr as usize },
        64usize,
        concat!(
            "Offset of field: ",
            stringify!(XI_IMG_DESC),
            "::",
            stringify!(Area3Top)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).Area4Top) as usize - ptr as usize },
        68usize,
        concat!(
            "Offset of field: ",
            stringify!(XI_IMG_DESC),
            "::",
            stringify!(Area4Top)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).Area5Top) as usize - ptr as usize },
        72usize,
        concat!(
            "Offset of field: ",
            stringify!(XI_IMG_DESC),
            "::",
            stringify!(Area5Top)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).ActiveAreaHeight) as usize - ptr as usize },
        76usize,
        concat!(
            "Offset of field: ",
            stringify!(XI_IMG_DESC),
            "::",
            stringify!(ActiveAreaHeight)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).Area5Bottom) as usize - ptr as usize },
        80usize,
        concat!(
            "Offset of field: ",
            stringify!(XI_IMG_DESC),
            "::",
            stringify!(Area5Bottom)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).Area4Bottom) as usize - ptr as usize },
        84usize,
        concat!(
            "Offset of field: ",
            stringify!(XI_IMG_DESC),
            "::",
            stringify!(Area4Bottom)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).Area3Bottom) as usize - ptr as usize },
        88usize,
        concat!(
            "Offset of field: ",
            stringify!(XI_IMG_DESC),
            "::",
            stringify!(Area3Bottom)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).Area2Bottom) as usize - ptr as usize },
        92usize,
        concat!(
            "Offset of field: ",
            stringify!(XI_IMG_DESC),
            "::",
            stringify!(Area2Bottom)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).Area1Bottom) as usize - ptr as usize },
        96usize,
        concat!(
            "Offset of field: ",
            stringify!(XI_IMG_DESC),
            "::",
            stringify!(Area1Bottom)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).Area0Bottom) as usize - ptr as usize },
        100usize,
        concat!(
            "Offset of field: ",
            stringify!(XI_IMG_DESC),
            "::",
            stringify!(Area0Bottom)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).format) as usize - ptr as usize },
        104usize,
        concat!(
            "Offset of field: ",
            stringify!(XI_IMG_DESC),
            "::",
            stringify!(format)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).flags) as usize - ptr as usize },
        108usize,
        concat!(
            "Offset of field: ",
            stringify!(XI_IMG_DESC),
            "::",
            stringify!(flags)
        )
    );
}
pub type LPXI_IMG_DESC = *mut XI_IMG_DESC;
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct XI_IMG {
    pub size: DWORD,
    pub bp: LPVOID,
    pub bp_size: DWORD,
    pub frm: XI_IMG_FORMAT::Type,
    pub width: DWORD,
    pub height: DWORD,
    pub nframe: DWORD,
    pub tsSec: DWORD,
    pub tsUSec: DWORD,
    pub GPI_level: DWORD,
    pub black_level: DWORD,
    pub padding_x: DWORD,
    pub AbsoluteOffsetX: DWORD,
    pub AbsoluteOffsetY: DWORD,
    pub transport_frm: DWORD,
    pub img_desc: XI_IMG_DESC,
    pub DownsamplingX: DWORD,
    pub DownsamplingY: DWORD,
    pub flags: DWORD,
    pub exposure_time_us: DWORD,
    pub gain_db: f32,
    pub acq_nframe: DWORD,
    pub image_user_data: DWORD,
    pub exposure_sub_times_us: [DWORD; 5usize],
    pub data_saturation: f64,
    pub wb_red: f32,
    pub wb_green: f32,
    pub wb_blue: f32,
    pub lg_black_level: DWORD,
    pub hg_black_level: DWORD,
    pub lg_range: DWORD,
    pub hg_range: DWORD,
    pub gain_ratio: f32,
    pub fDownsamplingX: f32,
    pub fDownsamplingY: f32,
    pub color_filter_array: XI_COLOR_FILTER_ARRAY::Type,
}
#[test]
fn bindgen_test_layout_XI_IMG() {
    const UNINIT: ::std::mem::MaybeUninit<XI_IMG> = ::std::mem::MaybeUninit::uninit();
    let ptr = UNINIT.as_ptr();
    assert_eq!(
        ::std::mem::size_of::<XI_IMG>(),
        288usize,
        concat!("Size of: ", stringify!(XI_IMG))
    );
    assert_eq!(
        ::std::mem::align_of::<XI_IMG>(),
        8usize,
        concat!("Alignment of ", stringify!(XI_IMG))
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).size) as usize - ptr as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(XI_IMG),
            "::",
            stringify!(size)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).bp) as usize - ptr as usize },
        8usize,
        concat!(
            "Offset of field: ",
            stringify!(XI_IMG),
            "::",
            stringify!(bp)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).bp_size) as usize - ptr as usize },
        16usize,
        concat!(
            "Offset of field: ",
            stringify!(XI_IMG),
            "::",
            stringify!(bp_size)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).frm) as usize - ptr as usize },
        20usize,
        concat!(
            "Offset of field: ",
            stringify!(XI_IMG),
            "::",
            stringify!(frm)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).width) as usize - ptr as usize },
        24usize,
        concat!(
            "Offset of field: ",
            stringify!(XI_IMG),
            "::",
            stringify!(width)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).height) as usize - ptr as usize },
        28usize,
        concat!(
            "Offset of field: ",
            stringify!(XI_IMG),
            "::",
            stringify!(height)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).nframe) as usize - ptr as usize },
        32usize,
        concat!(
            "Offset of field: ",
            stringify!(XI_IMG),
            "::",
            stringify!(nframe)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).tsSec) as usize - ptr as usize },
        36usize,
        concat!(
            "Offset of field: ",
            stringify!(XI_IMG),
            "::",
            stringify!(tsSec)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).tsUSec) as usize - ptr as usize },
        40usize,
        concat!(
            "Offset of field: ",
            stringify!(XI_IMG),
            "::",
            stringify!(tsUSec)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).GPI_level) as usize - ptr as usize },
        44usize,
        concat!(
            "Offset of field: ",
            stringify!(XI_IMG),
            "::",
            stringify!(GPI_level)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).black_level) as usize - ptr as usize },
        48usize,
        concat!(
            "Offset of field: ",
            stringify!(XI_IMG),
            "::",
            stringify!(black_level)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).padding_x) as usize - ptr as usize },
        52usize,
        concat!(
            "Offset of field: ",
            stringify!(XI_IMG),
            "::",
            stringify!(padding_x)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).AbsoluteOffsetX) as usize - ptr as usize },
        56usize,
        concat!(
            "Offset of field: ",
            stringify!(XI_IMG),
            "::",
            stringify!(AbsoluteOffsetX)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).AbsoluteOffsetY) as usize - ptr as usize },
        60usize,
        concat!(
            "Offset of field: ",
            stringify!(XI_IMG),
            "::",
            stringify!(AbsoluteOffsetY)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).transport_frm) as usize - ptr as usize },
        64usize,
        concat!(
            "Offset of field: ",
            stringify!(XI_IMG),
            "::",
            stringify!(transport_frm)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).img_desc) as usize - ptr as usize },
        68usize,
        concat!(
            "Offset of field: ",
            stringify!(XI_IMG),
            "::",
            stringify!(img_desc)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).DownsamplingX) as usize - ptr as usize },
        180usize,
        concat!(
            "Offset of field: ",
            stringify!(XI_IMG),
            "::",
            stringify!(DownsamplingX)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).DownsamplingY) as usize - ptr as usize },
        184usize,
        concat!(
            "Offset of field: ",
            stringify!(XI_IMG),
            "::",
            stringify!(DownsamplingY)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).flags) as usize - ptr as usize },
        188usize,
        concat!(
            "Offset of field: ",
            stringify!(XI_IMG),
            "::",
            stringify!(flags)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).exposure_time_us) as usize - ptr as usize },
        192usize,
        concat!(
            "Offset of field: ",
            stringify!(XI_IMG),
            "::",
            stringify!(exposure_time_us)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).gain_db) as usize - ptr as usize },
        196usize,
        concat!(
            "Offset of field: ",
            stringify!(XI_IMG),
            "::",
            stringify!(gain_db)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).acq_nframe) as usize - ptr as usize },
        200usize,
        concat!(
            "Offset of field: ",
            stringify!(XI_IMG),
            "::",
            stringify!(acq_nframe)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).image_user_data) as usize - ptr as usize },
        204usize,
        concat!(
            "Offset of field: ",
            stringify!(XI_IMG),
            "::",
            stringify!(image_user_data)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).exposure_sub_times_us) as usize - ptr as usize },
        208usize,
        concat!(
            "Offset of field: ",
            stringify!(XI_IMG),
            "::",
            stringify!(exposure_sub_times_us)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).data_saturation) as usize - ptr as usize },
        232usize,
        concat!(
            "Offset of field: ",
            stringify!(XI_IMG),
            "::",
            stringify!(data_saturation)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).wb_red) as usize - ptr as usize },
        240usize,
        concat!(
            "Offset of field: ",
            stringify!(XI_IMG),
            "::",
            stringify!(wb_red)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).wb_green) as usize - ptr as usize },
        244usize,
        concat!(
            "Offset of field: ",
            stringify!(XI_IMG),
            "::",
            stringify!(wb_green)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).wb_blue) as usize - ptr as usize },
        248usize,
        concat!(
            "Offset of field: ",
            stringify!(XI_IMG),
            "::",
            stringify!(wb_blue)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).lg_black_level) as usize - ptr as usize },
        252usize,
        concat!(
            "Offset of field: ",
            stringify!(XI_IMG),
            "::",
            stringify!(lg_black_level)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).hg_black_level) as usize - ptr as usize },
        256usize,
        concat!(
            "Offset of field: ",
            stringify!(XI_IMG),
            "::",
            stringify!(hg_black_level)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).lg_range) as usize - ptr as usize },
        260usize,
        concat!(
            "Offset of field: ",
            stringify!(XI_IMG),
            "::",
            stringify!(lg_range)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).hg_range) as usize - ptr as usize },
        264usize,
        concat!(
            "Offset of field: ",
            stringify!(XI_IMG),
            "::",
            stringify!(hg_range)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).gain_ratio) as usize - ptr as usize },
        268usize,
        concat!(
            "Offset of field: ",
            stringify!(XI_IMG),
            "::",
            stringify!(gain_ratio)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).fDownsamplingX) as usize - ptr as usize },
        272usize,
        concat!(
            "Offset of field: ",
            stringify!(XI_IMG),
            "::",
            stringify!(fDownsamplingX)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).fDownsamplingY) as usize - ptr as usize },
        276usize,
        concat!(
            "Offset of field: ",
            stringify!(XI_IMG),
            "::",
            stringify!(fDownsamplingY)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).color_filter_array) as usize - ptr as usize },
        280usize,
        concat!(
            "Offset of field: ",
            stringify!(XI_IMG),
            "::",
            stringify!(color_filter_array)
        )
    );
}
impl Default for XI_IMG {
    fn default() -> Self {
        let mut s = ::std::mem::MaybeUninit::<Self>::uninit();
        unsafe {
            ::std::ptr::write_bytes(s.as_mut_ptr(), 0, 1);
            s.assume_init()
        }
    }
}
pub type LPXI_IMG = *mut XI_IMG;
extern "C" {
    #[doc = "/\n/**\n\\brief Return number of discovered devices\n\nReturns the pointer to the number of all discovered devices.\n\n@param[out] pNumberDevices\t\t\tnumber of discovered devices\n@return XI_OK on success, error value otherwise."]
    pub fn xiGetNumberDevices(pNumberDevices: PDWORD) -> XI_RETURN;
}
extern "C" {
    #[doc = "\\brief Get device parameter\n\nAllows the user to get the current device state and information.\nParameters can be used:XI_PRM_DEVICE_SN, XI_PRM_DEVICE_INSTANCE_PATH, XI_PRM_DEVICE_TYPE, XI_PRM_DEVICE_NAME\n\n@param[in] DevId\t\t\t\t\t\tindex of the device\n@param[in] prm\t\t\t\t\t\tparameter name string.\n@param[in] val\t\t\t\t\t\tpointer to parameter set value.\n@param[in] size\t\t\t\t\t\tpointer to integer.\n@param[in] type\t\t\t\t\t\tpointer to type container.\n@return XI_OK on success, error value otherwise."]
    pub fn xiGetDeviceInfo(
        DevId: DWORD,
        prm: *const ::std::os::raw::c_char,
        val: *mut ::std::os::raw::c_void,
        size: *mut DWORD,
        type_: *mut XI_PRM_TYPE::Type,
    ) -> XI_RETURN;
}
extern "C" {
    #[doc = "\\brief Initialize device\n\nThis function prepares the camera's software for work.\nIt populates structures, runs initializing procedures, allocates resources - prepares the camera for work.\n\n\\note Function creates and returns handle of the specified device. To de-initialize the camera and destroy the handler xiCloseDevice should be called.\n\n@param[in] DevId\t\t\t\t\t\tindex of the device\n@param[out] hDevice\t\t\t\t\thandle to device\n@return XI_OK on success, error value otherwise."]
    pub fn xiOpenDevice(DevId: DWORD, hDevice: PHANDLE) -> XI_RETURN;
}
extern "C" {
    #[doc = "\\brief Initialize selected device\n\nThis function prepares the camera's software for work. Camera is selected by using appropriate enumerator and input parameters.\nIt populates structures, runs initializing procedures, allocates resources - prepares the camera for work.\n\n\\note Function creates and returns handle of the specified device. To de-initialize the camera and destroy the handler xiCloseDevice should be called.\n\n@param[in]  sel                     select method to be used for camera selection\n@param[in]  prm                     input string to be used during camera selection\n@param[out] hDevice\t\t\t\t\thandle to device   @return XI_OK on success, error value otherwise."]
    pub fn xiOpenDeviceBy(
        sel: XI_OPEN_BY::Type,
        prm: *const ::std::os::raw::c_char,
        hDevice: PHANDLE,
    ) -> XI_RETURN;
}
extern "C" {
    #[doc = "\\brief Uninitialize device\n\nCloses camera handle and releases allocated resources.\n\n@param[in] hDevice\t\t\t\t\thandle to device\n@return XI_OK on success, error value otherwise."]
    pub fn xiCloseDevice(hDevice: HANDLE) -> XI_RETURN;
}
extern "C" {
    #[doc = "\\brief Start image acquisition\n\nBegins the work cycle and starts data acquisition from the camera.\n\n@param[in] hDevice\t\t\t\t\thandle to device\n@return XI_OK on success, error value otherwise."]
    pub fn xiStartAcquisition(hDevice: HANDLE) -> XI_RETURN;
}
extern "C" {
    #[doc = "\\brief Stop image acquisition\n\nEnds the work cycle of the camera, stops data acquisition and deallocates internal image buffers.\n\n@param[in] hDevice\t\t\t\t\thandle to device\n@return XI_OK on success, error value otherwise."]
    pub fn xiStopAcquisition(hDevice: HANDLE) -> XI_RETURN;
}
extern "C" {
    #[doc = "\\brief Return pointer to image structure\n\nAllows the user to retrieve the frame into LPXI_IMG structure.\n\n@param[in] hDevice\t\t\t\t\thandle to device\n@param[in] timeout\t\t\t\t\ttime interval required to wait for the image (in milliseconds).\n@param[out] img\t\t\t\t\t\tpointer to image info structure\n@return XI_OK on success, error value otherwise."]
    pub fn xiGetImage(hDevice: HANDLE, timeout: DWORD, img: LPXI_IMG) -> XI_RETURN;
}
extern "C" {
    #[doc = "\\brief Set device parameter\n\nAllows the user to control device.\n\n@param[in] hDevice\t\t\t\t\thandle to device\n@param[in] prm\t\t\t\t\t\tparameter name string.\n@param[in] val\t\t\t\t\t\tpointer to parameter set value.\n@param[in] size\t\t\t\t\t\tsize of val.\n@param[in] type\t\t\t\t\t\tval data type.\n@return XI_OK on success, error value otherwise."]
    pub fn xiSetParam(
        hDevice: HANDLE,
        prm: *const ::std::os::raw::c_char,
        val: *mut ::std::os::raw::c_void,
        size: DWORD,
        type_: XI_PRM_TYPE::Type,
    ) -> XI_RETURN;
}
extern "C" {
    #[doc = "\\brief Get device parameter\n\nAllows the user to get the current device state and information.\n\n@param[in] hDevice\t\t\t\t\thandle to device\n@param[in] prm\t\t\t\t\t\tparameter name string.\n@param[in] val\t\t\t\t\t\tpointer to parameter set value.\n@param[in] size\t\t\t\t\t\tpointer to integer.\n@param[in] type\t\t\t\t\t\tpointer to type container.\n@return XI_OK on success, error value otherwise."]
    pub fn xiGetParam(
        hDevice: HANDLE,
        prm: *const ::std::os::raw::c_char,
        val: *mut ::std::os::raw::c_void,
        size: *mut DWORD,
        type_: *mut XI_PRM_TYPE::Type,
    ) -> XI_RETURN;
}
extern "C" {
    pub fn xiSetParamInt(
        hDevice: HANDLE,
        prm: *const ::std::os::raw::c_char,
        val: ::std::os::raw::c_int,
    ) -> XI_RETURN;
}
extern "C" {
    pub fn xiSetParamFloat(
        hDevice: HANDLE,
        prm: *const ::std::os::raw::c_char,
        val: f32,
    ) -> XI_RETURN;
}
extern "C" {
    pub fn xiSetParamString(
        hDevice: HANDLE,
        prm: *const ::std::os::raw::c_char,
        val: *mut ::std::os::raw::c_void,
        size: DWORD,
    ) -> XI_RETURN;
}
extern "C" {
    pub fn xiGetParamInt(
        hDevice: HANDLE,
        prm: *const ::std::os::raw::c_char,
        val: *mut ::std::os::raw::c_int,
    ) -> XI_RETURN;
}
extern "C" {
    pub fn xiGetParamFloat(
        hDevice: HANDLE,
        prm: *const ::std::os::raw::c_char,
        val: *mut f32,
    ) -> XI_RETURN;
}
extern "C" {
    pub fn xiGetParamString(
        hDevice: HANDLE,
        prm: *const ::std::os::raw::c_char,
        val: *mut ::std::os::raw::c_void,
        size: DWORD,
    ) -> XI_RETURN;
}
extern "C" {
    pub fn xiGetDeviceInfoInt(
        DevId: DWORD,
        prm: *const ::std::os::raw::c_char,
        value: *mut ::std::os::raw::c_int,
    ) -> XI_RETURN;
}
extern "C" {
    pub fn xiGetDeviceInfoString(
        DevId: DWORD,
        prm: *const ::std::os::raw::c_char,
        value: *mut ::std::os::raw::c_char,
        value_size: DWORD,
    ) -> XI_RETURN;
}
extern "C" {
    pub fn xiSetDeviceInfoString(
        DevId: DWORD,
        prm: *const ::std::os::raw::c_char,
        value: *mut ::std::os::raw::c_char,
        value_size: DWORD,
    ) -> XI_RETURN;
}
pub type xiProcessingHandle_t = *mut ::std::os::raw::c_void;
extern "C" {
    #[doc = " OpenProcessing\n Opens new instance for Image Processing entity\n @param[out] processing_handle New processing handle - valid on success"]
    pub fn xiProcOpen(processing_handle: *mut xiProcessingHandle_t) -> XI_RETURN;
}
extern "C" {
    #[doc = " xiSetProcParam\n Sets the selected parameter to processing\n @param[in] processing_handle\t\t\tHandle for processing\n @param[in] prm\t\t\t\t\t\tparameter name string.\n @param[in] val\t\t\t\t\t\tpointer to parameter set value.\n @param[in] size\t\t\t\t\t\tsize of val.\n @param[in] type\t\t\t\t\t\tval data type.\n @return XI_OK on success, error value otherwise."]
    pub fn xiProcSetParam(
        processing_handle: xiProcessingHandle_t,
        prm: *const ::std::os::raw::c_char,
        val: *mut ::std::os::raw::c_void,
        size: DWORD,
        type_: XI_PRM_TYPE::Type,
    ) -> XI_RETURN;
}
extern "C" {
    #[doc = " xiGetProcParam\n Gets the selected parameter from processing\n @param[in] processing_handle\t\t\tHandle for processing\n @param[in] prm\t\t\t\t\t\tparameter name string.\n @param[in] val\t\t\t\t\t\tpointer to parameter set value.\n @param[in] size\t\t\t\t\t\tsize of val.\n @param[in] type\t\t\t\t\t\tval data type.\n @return XI_OK on success, error value otherwise."]
    pub fn xiProcGetParam(
        processing_handle: xiProcessingHandle_t,
        prm: *const ::std::os::raw::c_char,
        val: *mut ::std::os::raw::c_void,
        size: DWORD,
        type_: XI_PRM_TYPE::Type,
    ) -> XI_RETURN;
}
extern "C" {
    #[doc = " xiPushImage\n Set unprocessed image to processing chain\n @param[in] processing_handle Processing handle\n @param[out] fist_pixel First byte of first pixel of image to be processed"]
    pub fn xiProcPushImage(
        processing_handle: xiProcessingHandle_t,
        first_pixel: *mut ::std::os::raw::c_uchar,
    ) -> XI_RETURN;
}
extern "C" {
    #[doc = " xiPushImage\n Set unprocessed image to processing chain\n @param[in] processing_handle Processing handle\n @param[in] Pointer to XI_IMG structure"]
    pub fn xiProcPushXiImg(
        processing_handle: xiProcessingHandle_t,
        image: *mut XI_IMG,
    ) -> XI_RETURN;
}
extern "C" {
    #[doc = " xiPullImage\n Gets processed image from processing chain\n @param[in] processing_handle Processing handle\n @param[in] timeout_ms Processing handle"]
    pub fn xiProcPullImage(
        processing_handle: xiProcessingHandle_t,
        timeout_ms: ::std::os::raw::c_int,
        new_image: *mut XI_IMG,
    ) -> XI_RETURN;
}
extern "C" {
    #[doc = " CloseProcessing\n Closes instance for Image Processing entity\n @param processing_handle[out] Processing handle to be closed"]
    pub fn xiProcClose(processing_handle: xiProcessingHandle_t) -> XI_RETURN;
}
